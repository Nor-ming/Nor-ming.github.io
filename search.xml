<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDA pro使用笔记</title>
    <url>/2021/02/07/IDA%20pro%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>学习资料：IDA Pro    权威指南[美]Chris Eagle</p>
<h6 id="1-什么情况下需要使用反汇编？"><a href="#1-什么情况下需要使用反汇编？" class="headerlink" title="1.什么情况下需要使用反汇编？"></a>1.什么情况下需要使用反汇编？</h6><p>1)分析恶意软件<br>2)分析闭源软件的漏洞<br>3)分析闭源软件的互操作性<br>4)分析编译器生成的代码，以验证编译器的性能和准确性<br>5)在调试时显示程序指令</p>
<h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p>动态分析：是指在严格控制的环境中执行恶意软件，并使用系统检测实用工具记录其所有行为。<br>静态分析：试图通过代码来理解程序的行为。(查看对恶意软件进行反汇编之后得到的代码清单）。</p>
<h6 id="3-基本的反汇编算法："><a href="#3-基本的反汇编算法：" class="headerlink" title="3.基本的反汇编算法："></a>3.基本的反汇编算法：</h6><p>1)确定进行反汇编的代码区域；<br>2)知道指令的起始地址，读取该地址（或文件偏移量）所包含的值，并执行一次表查找，将二进制操作码的值余它的汇编语言助记符对应起来；<br>3)获取指令并解码任何所需的操作数后，需要对它的汇编语言等价形式格式话，并将其在反汇编代码中输出。<br>4)输出一条指令后，继续反汇编下一条指令，并重复上述过程，直到反汇编完文件中的所有指令。</p>
<h6 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h6><p>汇编语言源代码主要采用两种语法：AT&amp;T语法和Intel语法。<br>两种最主要的反汇编算法：线性扫描和递归下降。</p>
<h6 id="5-线性扫描反汇编的优缺点："><a href="#5-线性扫描反汇编的优缺点：" class="headerlink" title="5.线性扫描反汇编的优缺点："></a>5.线性扫描反汇编的优缺点：</h6><p>优点：能够完全覆盖程序的所有代码段。<br>缺点：没有考虑到代码中可能混有数据。<br>GNU调试器（gdb),微软公司的WinDug调试器和objdump实用工具均采用线性扫描算法。</p>
<h6 id="6-IDA-pro：递归下降反汇编。"><a href="#6-IDA-pro：递归下降反汇编。" class="headerlink" title="6.IDA pro：递归下降反汇编。"></a>6.IDA pro：递归下降反汇编。</h6><h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p>在使用IDA时，如果不知道是哪一种类型的文件，可以使用Go而不是New打开，以便跳过新文件导向。<br>用IDA加载文件，IDA会创建一个数据库，其组件分别保存在4个文件中，.id0,.id1,.nam,.til，分别对应是一个二叉树形式的数据库，描述每个程序字节的标记，与IDA的Named窗口中显示的给定程序位置有关的索引信息，用于存储与一个给定数据库的本地类型定义有关的信息。</p>
<h6 id="8-关闭IDA数据库："><a href="#8-关闭IDA数据库：" class="headerlink" title="8.关闭IDA数据库："></a>8.关闭IDA数据库：</h6><p>1）不打包数据库：不创建IDB文件，不建议；<br>2）打包数据库（存储）：将4个数据库组件文件存到一个IDB文件中，创建后，4个数据库组件文件即被删除；<br>3）打包数据库（压缩）：基本同上，唯一的差别在于数据库组件文件被压缩到IDB归档文件中。<br>4）收集垃圾：通常只在磁盘空间不足时使用；<br>5）不保存数据库：放弃当前对数据库所做的更改的唯一办法，类似撤销和还原功能。</p>
<h6 id="9-IDA崩溃怎么办？"><a href="#9-IDA崩溃怎么办？" class="headerlink" title="9.IDA崩溃怎么办？"></a>9.IDA崩溃怎么办？</h6><p>可以选择还原上次保存的版本，或依旧使用已打开的可能遭到破坏的版本，选择“继续使用未打包的库“并不能保证可以恢复所做的全部修改。</p>
<h6 id="10-IDA桌面简介："><a href="#10-IDA桌面简介：" class="headerlink" title="10.IDA桌面简介："></a>10.IDA桌面简介：</h6><p>1）彩色的水平带是IDA的概况导航栏（导航带），是被加载文件地址空间的线性视图。<br>2）对函数视图中的函数进行选中，即会跳转到反汇编视图中，可使用空格键在列表视图样式和图形试图样式（流程图）中切换。<br>3）使用View-&gt;Open Subviews命令恢复无意中关闭的数据显示窗口；<br>     使用Windows-&gt;Reset Desktop 命令可以迅速将桌面恢复到原始布局；<br>     使用Windows-&gt;Save Desktop 命保存你认为特别有用的当前桌面布局，使用Windows-&gt;Load Desktop命令迅速打开你之前保存的一个桌面布局；</p>
<h6 id="11-IDA不提供撤销功能！！！"><a href="#11-IDA不提供撤销功能！！！" class="headerlink" title="11.IDA不提供撤销功能！！！"></a>11.IDA不提供撤销功能！！！</h6><h6 id="12-ESC键用于关闭窗口。"><a href="#12-ESC键用于关闭窗口。" class="headerlink" title="12.ESC键用于关闭窗口。"></a>12.ESC键用于关闭窗口。</h6><h6 id="13-反汇编窗口："><a href="#13-反汇编窗口：" class="headerlink" title="13.反汇编窗口："></a>13.反汇编窗口：</h6><p>反汇编窗口又叫IDA-View窗口，是操作和分析二进制文件的主要工具。<br>1）IDA图形视图：<br>      将一个函数分解成许多基本块，显示该函数由一个块到另一个快的控制流程。<br>      每个基本块都有唯一的入口点和退出点。<br>      Yes绿色（执行分支），No红色（不执行分支）可用CTRL和加减号以及鼠标的滑轮来调整图形的大小，必要时使用概览。</p>
<h6 id="14-Names窗口（名称窗口）："><a href="#14-Names窗口（名称窗口）：" class="headerlink" title="14.Names窗口（名称窗口）："></a>14.Names窗口（名称窗口）：</h6><p>简要列举了一个二进制文件的所有全局名称，名称是指对一个程序虚拟地址的符号描述，可通过双击该窗口中的名称来立即跳转到显示该名称的反汇编视图。</p>
<h6 id="15-十六进制窗口："><a href="#15-十六进制窗口：" class="headerlink" title="15.十六进制窗口："></a>15.十六进制窗口：</h6><p>显示程序内容和列表的标准十六进制代码，每行显示16个字节，以及对应的ASCII字符。在反汇编窗口中，光标指向地址004013FA（一个调用指令），那么，在十六进制窗口中，构成这个指令的全部5个字节均突出显示。</p>
<h6 id="16-导入窗口："><a href="#16-导入窗口：" class="headerlink" title="16.导入窗口："></a>16.导入窗口：</h6><p>使用共享库时，IDA才需要用到导入窗口，静态链接的二进制文件不存在外部依赖关系，因此不需要导入其他内容。</p>
<h6 id="17-结构体窗口："><a href="#17-结构体窗口：" class="headerlink" title="17.结构体窗口："></a>17.结构体窗口：</h6><p>用于显示IDA决定在一个二进制文件中使用的任何复杂的数据结构的布局。可以为标准数据结构的布局提供现成的参考，帮助自己创建自己的可用作内存布局模块的数据结构。</p>
<h6 id="18-枚举窗口："><a href="#18-枚举窗口：" class="headerlink" title="18.枚举窗口："></a>18.枚举窗口：</h6><p>列出标准枚举数据类型，可以使用枚举来代替整数常量，提高反汇编代码的可读性。</p>
<h6 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h6><p>IDA中的段和二进制中的段不是一个意思。</p>
<h6 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h6><p>按下快捷键G可以打开“跳转到地址“的窗口。</p>
<h6 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h6><p>IDA注释以分号为前缀，表示这一行分号以后的部分属于前缀。</p>
<h6 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h6><p>IDA的脚本语言叫IDC。</p>
<p>注：<br>对于mips架构下的逆向工程，ida不能进行反汇编<br>如果仍想使用ida解决，可以下载插件Retdec，对v.0.7版本的ida可能不识别。</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFd平台搭建（文件方式）</title>
    <url>/2021/02/07/CTFd%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%EF%BC%88%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>记录一下自己搭建过程中踩的坑<br>没有云服务器，在虚拟机中搭建的，使用的是Ubuntu16.04.7LTS<br>查看当前版本的命令：<code>cat /etc/issue</code><br>然后发现自己的虚拟机连不上网了，重新弄一下吧，选的是NAT模式。<br><img src="https://img-blog.csdnimg.cn/20200912164424975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意给它管理员权限才能更改。</p>
<p>连上网后就可以开始了<br>1.升级源</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>在升级源的时候可能会报错<br><img src="https://img-blog.csdnimg.cn/2020091216540780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我自己忘记截图了，用一下网上博客的图片吧<br>遇到这种情况是因为连接不到 US 的服务器，所以更新失败，需要在系统设置中将源服务器设置为中国的。<br><img src="https://img-blog.csdnimg.cn/20200912165825384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样应该就可以了，如果还不巧遇到了报的错误为”Failed to fetch 404 Not Found”，这个问题参考了一下<a href="https://www.cnblogs.com/wangshaowei/p/10994764.html">https://www.cnblogs.com/wangshaowei/p/10994764.html</a>的博客，说是是因为每个Ubuntu版本都有生命结束周期（EOL）时间，常规的Ubuntu发行版提供18个月的支持，而LTS（长期支持）版本则长达3年（服务器版本）和5年（桌面版本）。当某个Ubuntu版本达到生命结束周期时，其仓库就不能再访问了，你也不能再从Canonical获取任何维护更新和安全补丁。如果你所使用的Ubuntu系统已经被结束生命周期，你就会从apt-get或aptitude得到以下404错误，因为它的仓库已经被遗弃了。</p>
<p>解决方法为将/etc/apt/sources.list路径下的源替换为旧版本仓库的源。</p>
<p>2.安装git，因为CTFd的源码和部署好的题目都是要通过github传输的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>
<p>3.安装pip　　</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure>
<p>安装pip的时候也会遇到一些问题，如果出现异常可以升级pip</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>4.安装Flask，因为CTFd是基于Flask框架建造的，所以要搭建CTFd要安装Flask</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo pip install Flask</span><br></pre></td></tr></table></figure>
<p>5.下载CTFd</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo git clone https:<span class="comment">//github.com/isislab/CTFd.git</span></span><br></pre></td></tr></table></figure>
<p>6.安装CTFd</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cd CTFd</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo ./prepare.sh</span><br></pre></td></tr></table></figure>
<p>第二条命令执行完了之后可能会遇到警告和报错，下面逐步介绍一下如何解决<br><img src="https://img-blog.csdnimg.cn/20200912171919176.png#pic_center" alt="在这里插入图片描述"><br>这是由于Python版本的问题了，Ubuntu自带2.7和3.5版本的Python，而2的版本在2020年1月就停止维护了，未来的pip版本将放弃对Python 2.7的支持。我们需要将2的版本改成3的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 <span class="number">100</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 <span class="number">150</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用这两个命令将2 改成3<br>改完了之后可以检查一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<p>这个命令可以看到当前Pyhton的版本，但是可能不准确，因为通过改变指向可以让它显示，但是并不能将环境也改变成3 ，而环境变量是和默认有关联的<br>可通过查看环境来确定，如下命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">env python</span><br></pre></td></tr></table></figure>
<p>如果此时显示的是3 的版本那就是成功改变了<br>接下来我们需要给3 安装它的pip，否则它会出现<br>/usr/bin/python3: No module named pip<br>也会出现这样的报错<br><img src="https://img-blog.csdnimg.cn/20200912173314758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载安装pip的方法很简单，在虚拟机中的官网下载按照说明安装就行了。注意要使用sudo命令不然没有权限会安装失败。</p>
<p>可能还会出现这样的警告<br><img src="https://img-blog.csdnimg.cn/20200912174111985.png#pic_center" alt="在这里插入图片描述"><br>这个执行以下命令应该就可以解决了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo chown -R root /home/$USERNAME/.cache/pip/</span><br><span class="line">sudo chown -R root /home/$USERNAME/.cache/pip/http/</span><br></pre></td></tr></table></figure>
<p>然后我们再执行安装CTFd的命令，发现它又出现了新的报错<br><img src="https://img-blog.csdnimg.cn/20200912174603106.png#pic_center" alt="在这里插入图片描述"><br>查看了pydantic的官方文档之后发现也是由于Pyhton版本的问题，他它需要3.6及以上的版本才能够支持，Python自带的版本最高只有3.5，这就需要升级<br>可以参考这篇博客，方法非常有效，而且有提供安装Python3.6之后怎样预防崩溃<br><a href="https://segmentfault.com/a/1190000021838605">https://segmentfault.com/a/1190000021838605</a><br>附上截图防止失效<br><img src="https://img-blog.csdnimg.cn/20200912175157339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果不小心真的把Ubuntu弄崩溃了导致终端框打不开，还可以参考这一篇博客<br><a href="https://blog.csdn.net/DeepWolf/article/details/88800603">https://blog.csdn.net/DeepWolf/article/details/88800603</a></p>
<p>这篇博客也介绍了Python3.6的安装方法以及如何改变环境，一定要记得改环境，不然依然就无法成功。<br><a href="https://blog.csdn.net/qq_32216809/article/details/86347926">https://blog.csdn.net/qq_32216809/article/details/86347926</a></p>
<p>这样再执行安装CTFd的命令应该就没有问题了</p>
<p>7.运行CTFd（要在打开CTFd文件的命令后执行（cd CTF））</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo python serve.py</span><br></pre></td></tr></table></figure>
<p>虚拟机的浏览器中访问127.0.0.1：4000/就可以看待自己的CTFd平台了<br><img src="https://img-blog.csdnimg.cn/20200912180012276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>不足的是它访问的速度非常慢…目前还不清楚应该如何解决，这篇博客也许能够提供帮助。<br><a href="https://blog.csdn.net/weixin_43880435/article/details/107339592?utm_source=app">https://blog.csdn.net/weixin_43880435/article/details/107339592?utm_source=app</a></p>
<p>如果想要让它在物理机中访问需要安装gunicorn并规定映射的端口<br>我尝试了但是没有成功，大家可以试一试。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo pip install gunicorn</span><br><span class="line">sudo gunicorn --bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span> -w <span class="number">1</span> <span class="string">&quot;CTFd:create_app()&quot;</span></span><br><span class="line">sudo pip install gunicorn</span><br></pre></td></tr></table></figure>
<p>关于速度慢可以尝试这个<br><a href="https://blog.csdn.net/asd413850393/article/details/98123982">https://blog.csdn.net/asd413850393/article/details/98123982</a></p>
<p>嗯，以上就是这次搭建的全过程，遇到了很多问题，下次尝试用docker搭建一下~</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MIPS汇编入门基础知识笔记</title>
    <url>/2021/02/07/MIPS%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>学习资料：[计算机组成与设计：硬件、软件接口(第4版)]</p>
<h6 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h6><p>每行最多只有一条指令，注释总在一行之尾结束。<br>add a,b,c      #表示把b,c相加放入a中，#后是表示注释。</p>
<h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p>每条MIPS算术指令只执行一个操作，并且有且仅有三个变量。</p>
<h6 id="3．"><a href="#3．" class="headerlink" title="3．"></a>3．</h6><p>MIPS中，只能对存放在寄存器中的数执行算术操作。</p>
<h6 id="4．"><a href="#4．" class="headerlink" title="4．"></a>4．</h6><p>减法 sub</p>
<h6 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h6><p>MIPS体系中寄存器大小为32位，故在MIPS体系中将其称为”字“。<br>字和寄存器的大小相同。</p>
<h6 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h6><p>一般的，用$s0~$s31表示变量所对应的寄存器，用$t0之类的表示所需的临时寄存器。</p>
<h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p>数据传送指令：在存储器和寄存器之间传送数据的指令，因为MIPS的算术运算只对寄存器进行操作；为了访问存储器中的一个字，指令必须给出存储器地址。存储器就是一个很大的下标从0开始的一堆数组，地址就相当于数组的下标。</p>
<h6 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h6><p>取数指令：lw 示例  A[8]，指令为 lw   $t0,32($s3)   $3是数组A的起始地址，又叫基址。数据传送指令中的常量（本例中的32）称作偏移量，存放基址的寄存器（本例中的$s3)称为基址寄存器。</p>
<h6 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h6><p>常数和寄存器中的值相加即得存储器地址。</p>
<h6 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h6><p>在MIPS中，字的起始地址必须是4的倍数，这叫对齐限制,MIPS实际上是按字节编址的，一个字有4个字节，字的地址是4的倍数。</p>
<h6 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h6><p>存数指令：  sw  示例：变量h存放在寄存器$s2中，数组A的基址放在$s3中，编译A[12]=h+A[8];<br>                 lw  $t0,32($s3)<br>                 add   $t0,$s2,$t0<br>                 sw       $t0,48($s3)   </p>
<h6 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h6><p>使用常数：<br>法1：lw  $t0,AddrConstant4($s1)<br>         add  $s3,$s3,$t0<br>(假设$s1+AddrConstant4 是常量4 的存储器地址）<br>法2：用立即数       addi    $s3,$s3,4            # $s3=$s3+4    （而且支持副常数，不需要设置减立即数的指令)</p>
<h6 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h6><p>数据传送指令可以被视作一个操作数为0的加法，MIPS将寄存器$zero恒置为0。<br>最低有效位：在MIPS字中最右边的一位。<br>最高有效位：在MIPS字中最左边的一位。<br>C和JAVA中用符号0xnnnn表示十六进制数。</p>
<h6 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h6><p>类似if和go to语句功能的指令：<br>beq register1,register2,L1   表示如果register1,register2中的数值相等，则转移到标签L1的语句执行，beq代表”如果相等则分支“。<br>bne register1,register2,L1 表示如果两者值不相等，转到标签L1的语句执行，bne代表“如果不相等则分支“<br>这两条传统上称为条件分支。<br>条件最后要有Exit退出。</p>
<h6 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h6><p>无条件分支指令：jump,简写为j,在if语句的结尾部分，需要引入另一种指令。</p>
<h6 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h6><p>循环:<br>Loop:<br>……<br>……<br>j   Loop        (跳转到循环开始Loop标签处）<br>Exit:</p>
<h6 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h6><p>$ra:用于返回起始点的返回地址寄存器<br>$a0<del>$a3:用于传递参数的四个参数寄存器<br>$v0</del>$v1:用于返回值的两个值寄存器</p>
<h6 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h6><p>栈指针：$sp（第29号寄存器）  栈指针指示栈中最近分配的地址的值，它指示寄存器被换出的位置，或寄存器旧值的存放位置。<br>栈指针以字为单位进行调整</p>
<h6 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h6><p>逻辑左移：sll   例：sll      $t1,$s3,2    左移两位（4）<br>逻辑右移：srl</p>
<h6 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h6><p>压栈：将数据放入栈中<br>出栈：从栈中移除数据</p>
<h6 id="附：MIPS常用指令一览表"><a href="#附：MIPS常用指令一览表" class="headerlink" title="附：MIPS常用指令一览表"></a>附：MIPS常用指令一览表</h6><p><img src="https://img-blog.csdnimg.cn/20200323152756435.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152812179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152831498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152843303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>给Ubuntu安装vmtools</title>
    <url>/2021/02/07/%E7%BB%99Ubuntu%E5%AE%89%E8%A3%85vmtools/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>之前安装ubuntu的时候没有安装vmtools，本周补安装<br> 打开ubuntu发现安装VMtools的小条变成了灰色点不了（应该是因为用的汉化版VNware）<br><img src="https://img-blog.csdnimg.cn/2020100111135071.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>解决办法：<br>1.关闭虚拟机；<br>2.在虚拟机设置分别设置CD/DVD、CD/DVD2、软盘为自动检测；<br>3.再重启虚拟机，灰色字即点亮。<br><img src="https://img-blog.csdnimg.cn/2020100111145969.png#pic_center" alt="在这里插入图片描述"><br>可能会造成打开的时候有问题，没关系，重复开几次一直OK就可以了<br>然后再打开就发现可以<br>点击虚拟机菜单栏中的【虚拟机】–&gt;【安装VMware Tools】<br>然后就出现了<br><img src="https://img-blog.csdnimg.cn/20201001111556538.png#pic_center" alt="在这里插入图片描述"><br>接下来把VMwareTools…tar.gz文件提取（不要点成复制了）到某个新建的目录下，比如myfile目录下：<br><img src="https://img-blog.csdnimg.cn/20201001111714526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>大概是这样，找的网图。<br>启动终端，然后切换到root用户（切换命令为：sudo su，回车然后会提示你输入当前登录用户的密码，输入成功后即可进入root用户）。<br>以root用户进入到刚刚提取到的vmware-tools-distrib文件夹下，然后输入命令：./vmware-install.pl，然后回车。<br>可能会出现报错：Unable to excute “/usr/bin/vmware-uninstall-tools.pl<br>主要原因是：usr/bin目录下没有vmware-uninstall-tools.pl<br>解决方案：<br>进入vmtools的文件解压目录，然后进入bin目录下将vmware-uninstall-tools.pl复制到usr/bin目录下<br>需要输入的命令分别有：<br>cd /opt<br>cd vmware-tools-distrib/<br>cd bin<br>cp vmware-uninstall-tools.pl /usr/bin<br>这样就没问题了，可以继续执行这部分的操作，附上网图，自己的终端被关了…<br><img src="https://img-blog.csdnimg.cn/20201001111811453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上面的操作后就开始安装VMware Tools了，根据其提示输入yes/no，直到出现Enjoy, –the VMware team如下图，就表示安装成功了，然后手动重启虚拟机<br><img src="https://img-blog.csdnimg.cn/20201001111836262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在这一步中也可能会出现问题，那是因为之前可能安装过vwtools但是没有成功，一般不用管重复这一步的命令然后按照它[]中提示的操作就可以了，非常傻瓜式的操作但是我喜欢。<br>重启虚拟机之后可以看到变成了<br><img src="https://img-blog.csdnimg.cn/20201001111859849.png#pic_center" alt="在这里插入图片描述"></p>
<p>到此<br>完成！！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo+github搭建个人博客</title>
    <url>/2021/02/07/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><em>之前实验室布置的任务，记录一下踩坑的过程,也参考了许多师傅的博客，在此感谢</em></p>
<h3 id="一-GitHub篇"><a href="#一-GitHub篇" class="headerlink" title="一.GitHub篇"></a>一.GitHub篇</h3><h5 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h5><p>首先需要有一个Github账号，直接官网注册就OK啦。<br>注册完成后需要新建一个仓库，仓库的命名就是<code>用户名.github.io</code>例如，我的用户名是<code>nor-ming</code>，我的仓库就叫<code>nor-ming.github.io</code>，这样方便让大家访问<br><img src="https://img-blog.csdnimg.cn/20210207165759645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：</p>
<ul>
<li>注册的邮箱需要验证，不要乱写</li>
<li>仓库创建成功可能不会立即生效，需要等一会<br>创建成功之后你可以在这里看到你的仓库<br><img src="https://img-blog.csdnimg.cn/20210207164739998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时访问<code>用户名.github.io</code>能够看见你之前建仓库时候README里面的内容，像这样<br><img src="https://img-blog.csdnimg.cn/2021020716494616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h5><a href="https://blog.csdn.net/sanxd/article/details/82624127">安装参考这个吧</a><br>安装完成后要配置环境变量：<br>网上说在Path变量中增加： C:\Program Files (x86)\Git\bin   （你git实际安装的bin路径）<br>我好像是这样的（真的不记得了啊啊啊啊啊<br><img src="https://img-blog.csdnimg.cn/20210207170756315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207171002258.png" alt="在这里插入图片描述"><br>验证是否配置成功，打开windows命令行，输入git命令，出现下列信息表示配置成功。<br><img src="https://img-blog.csdnimg.cn/20210207171100659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="为仓库配置SSH-Key"><a href="#为仓库配置SSH-Key" class="headerlink" title="为仓库配置SSH-Key"></a>为仓库配置SSH-Key</h5>GitHub上连接已有仓库是通过SSH公开密钥认证方式进行的，所以我们需要配置密钥。<br>打开Git BASH，运行命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>
<p>“邮件地址”写成在创建GitHub账户时候用的邮箱地址。然后连续回车三次（它会要求你设置密码，可以不设置直接回车就好了）<br>最终，它会生成一个文件，如图<br><img src="https://img-blog.csdnimg.cn/20210207172200456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记事本打开id_rsa.pub，复制里面的内容，在你的GitHub主页的设置中找到如下选项<br><img src="https://img-blog.csdnimg.cn/20210207171546343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击New SSH key<br>名称随便起，Title粘贴复制内容，添加成功后，邮箱会收到提示邮件<br>在Git Bash中测试，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210207172608821.png" alt="在这里插入图片描述"><br>如图所示即为设置成功<br>有的博客说还要配置Git信息，个人不太记得了，不放心可以试试，也是在Git Bash中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email  <span class="string">&quot;用户名@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="二-Node-js篇"><a href="#二-Node-js篇" class="headerlink" title="二.Node.js篇"></a>二.Node.js篇</h3><p>首先在自己的电脑上安装 Node.js，<a href="https://nodejs.org/zh-cn/download/">下载地址</a><br>安装完毕之后，配置环境变量<br><img src="https://img-blog.csdnimg.cn/2021020717323827.png" alt="在这里插入图片描述"><br>应该是这两个吧，在Path里面添加<br>测试<br><img src="https://img-blog.csdnimg.cn/20210207173411819.png" alt="在这里插入图片描述"><br>有的时候可能使用Git Bash会很慢，此时可以选择切换镜像（但是个人感觉还好，一般不建议换掉）<br>切换命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>查看版本命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure>
<p>切回官方镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://www.npmjs.org</span><br></pre></td></tr></table></figure>
<h3 id="三-Hexo篇"><a href="#三-Hexo篇" class="headerlink" title="三.Hexo篇"></a>三.Hexo篇</h3><p>Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完毕之后，配置环境变量<br>在path变量中添加类似如下的地址，注意最后是.bin文件</p>
<blockquote>
<p>C:\ProgramFiles\nodejs\node_global\node_modules\hexo\node_modules.bin</p>
</blockquote>
<p>测试<br><img src="https://img-blog.csdnimg.cn/20210207174338143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个文件夹，这个文件夹会是你以后管理博客用的，{}中填名字，运行之后找到该文件夹，会发现文件夹中出现了这样一些文件<br><img src="https://img-blog.csdnimg.cn/20210207205754630.png" alt="在这里插入图片描述"><br>在这里打开Git Bash，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>将 Hexo 编译生成 HTML 代码，<br>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p>
<p>此时，可以利用Hexo 提供的 serve 命令把博客在本地运行起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure>
<p>将项目成功运行在本地的4000端口上，浏览器访问<code>http://localhost:4000：</code> 即可看到空的博客页面</p>
<h3 id="四-部署完善篇"><a href="#四-部署完善篇" class="headerlink" title="四.部署完善篇"></a>四.部署完善篇</h3><p>只能在本地访问自然时不合适的，下面我们将要做的是将博客部署到 GitHub Pages 并完善它</p>
<p>记事本打开根目录下的 _config.yml 文件<br><img src="https://img-blog.csdnimg.cn/20210207210555144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 main 分支，最终修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Nor-ming/Nor-ming.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>这里需要注意，更新之后的win10可能并不能识别这个url，如果不可以，可以把repo改成<br>repo: <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:Nor-ming/Nor-ming.github.io<br>还需要额外安装一个支持 Git 的部署插件，名字叫做<code>hexo-deployer-git</code>，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>这是由于版本不同造成的，可以使用如下命令安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，执行部署命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>访问自己的博客网址，就可以看到和本地一样的内容了</p>
<p>我们还可以修改自己的站点信息<br>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Nor-ming</span><br><span class="line">subtitle: <span class="string">&#x27;&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;&#x27;</span></span><br><span class="line">keywords:</span><br><span class="line">author: Alien Wan（924704640@qq.com)</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>它们在我的网页中的显示是这样的<br><img src="https://img-blog.csdnimg.cn/2021020721222311.png" alt="在这里插入图片描述"><br>原来的主题太普通，我们可以换一个主题，下载Next主题并选择自己喜欢的<br>首先命令行进入到项目的根目录（对我来说救赎被我命名为Norming的文件夹），执行如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。<br>修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>hexo g<br>hexo d<br>即可查看</p>
<p>接下来我们就对主题进行进一步地详细配置<br>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。<br>Next 主题还提供了多种样式，通过修改配置文件的 scheme 字段即可，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line">scheme: Mist</span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>hexo g<br>hexo d 后即可查看</p>
<p>我们还可以自己制作站点的小标签<br>有一个网站可以直接将图片转化为站点小图标，站点链接为：<code>https://realfavicongenerator.net</code>，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。<br>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure>
<p>更新后可以发现站点图标改变了，例如我的<br><img src="https://img-blog.csdnimg.cn/20210207213037348.png" alt="在这里插入图片描述"><br>添加tags（标签）页面可以方便查找文章<br>在根目录执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>成功后会提示一个路径，根据路径，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-02-05 20:42:36</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加type: “tags”到内容中，添加后是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-02-05 20:42:36</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加分类页，也是为了帮助查找文章，方法类似上面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-02-05 20:52:50</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加后为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-02-05 20:52:50</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加文章<br><img src="https://img-blog.csdnimg.cn/20210207213210825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207213229361.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210207213243740.png" alt="在这里插入图片描述"><br>然后返回根目录，在Public文件夹下打开Git Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure>
<p>文章即上传成功（可能会慢，等一会多刷新几次就好了）</p>
<p>Hexo的首页默认会显示文章的详细信息，如果想让它只显示标题，如下所示<br><img src="https://img-blog.csdnimg.cn/20210207213809951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以在md文件前面这样写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: IDA pro使用笔记</span><br><span class="line">categories: 逆向学习笔记</span><br><span class="line">tags:</span><br><span class="line">- 逆向</span><br><span class="line">- 工具使用</span><br><span class="line">---</span><br><span class="line">&lt;escape&gt;&lt;!-- more --&gt;&lt;/escape&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意<escape><!-- more --></escape> 下一行也要空格</p>
<p>其中categories: 逆向学习笔记是分类<br>tags:</p>
<ul>
<li>逆向</li>
<li>工具使用<br>是标签<br>Public文件夹更新后可以看到这样<br><img src="https://img-blog.csdnimg.cn/20210207214653835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207214713716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文章多了查找不方便还可以加上一个搜索功能，需要先安装一个插件，叫做 <code>hexo-generator-searchdb</code>，命令如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在项目的 _config.yml 里面添加搜索设置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>然后在主题的 _config.yml 里面修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>更新后如图<br><img src="https://img-blog.csdnimg.cn/20210207214936237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>也可以加一个404页面<br>直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2021-02-05 21:22 </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">页面丢失啦~嘤嘤嘤(｡•́︿•̀｡)</span><br><span class="line">试试看&lt;a href=<span class="string">&quot;https://nor-ming.github.io/&gt;&quot;</span>&gt;点击此处&lt;/a&gt;返回首页(｡･ω･｡)ﾉ♡</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span><br><span class="line">    nor-ming</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>

<p>好啦，此时你就拥有了自己的博客啦，开始记录自己的学习过程吧~~</p>
<p>附上一些参考资料：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/jie-fang/p/13445913.html</span><br><span class="line">https://sspai.com/post/62441</span><br><span class="line">https://www.cnblogs.com/xrblog/p/11585902.html</span><br><span class="line">https://zhuanlan.zhihu.com/p/50787870</span><br><span class="line">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</span><br></pre></td></tr></table></figure>
<p>可能还有一些别的就不一一列举啦</p>
<p>最后<br>附上自己的博客<a href="https://nor-ming.github.io/">https://nor-ming.github.io/</a></p>
<p>完结<br>撒花花(✿≖ ◡ ≖)✧</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>easyre-reverse1-reverse2-内涵的软件-新年快乐-[BJDCTF 2nd]guessgame-helloword-xor</title>
    <url>/2021/02/08/easyre-reverse1-reverse2-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90-%5BBJDCTF%202nd%5Dguessgame-helloword-xor/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>@<a href="BUUCTF">TOC</a></p>
<h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>64位<br>ida打开  shift+F12看字符串 </p>
<p>flag{this_Is_a_EaSyRe}  </p>
<h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p>64位<br>ida打开 看字符串<br><img src="https://img-blog.csdnimg.cn/2021020817025880.png" alt="在这里插入图片描述"><br>双击过去<br><img src="https://img-blog.csdnimg.cn/20210208170426893.png" alt="在这里插入图片描述"><br>ctrl+x查看交叉引用<br><img src="https://img-blog.csdnimg.cn/20210208170448996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>F5查看伪代码(ASCII码转换按R键）<br><img src="https://img-blog.csdnimg.cn/20210208170509541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208170522887.png" alt="在这里插入图片描述"><br>可知，将{hello_world}中的o换成0即可</p>
<p>flag{hell0_w0rld}</p>
<h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p><img src="https://img-blog.csdnimg.cn/20210208170631319.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208170647776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag{hack1ng_fo1_fun}</p>
<h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p>32位<br><img src="https://img-blog.csdnimg.cn/20210208170731407.png" alt="在这里插入图片描述"><br>flag{49d3c93df25caad81232130f3d2ebfad}</p>
<p><em>注：建议先运行一下看看有什么，针对运行出的文字找，汉字可以看Hex View窗口的</em></p>
<h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p><img src="https://img-blog.csdnimg.cn/20210208170812143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>UPX壳，可手动，可用脱壳机<br>32位<br>脱完壳拖进ida<br><img src="https://img-blog.csdnimg.cn/20210208174817278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> flag{HappyNewYear!}</p>
<h2 id="BJDCTF-2nd-guessgame"><a href="#BJDCTF-2nd-guessgame" class="headerlink" title="[BJDCTF 2nd]guessgame"></a>[BJDCTF 2nd]guessgame</h2><p><img src="https://img-blog.csdnimg.cn/2021020817085670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>flag{S1mple_ReV3r5e_W1th_0D_0r_IDA}</p>
<h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><p><img src="https://img-blog.csdnimg.cn/2021020817092288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安卓逆向，模拟器打开，出现此界面<br>使用Android Killer<br><img src="https://img-blog.csdnimg.cn/20210208170953639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag{7631a988259a00816deda84afb29430a}</p>
<h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><img src="https://img-blog.csdnimg.cn/20210208171030530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>异或，再异或回去就好了<br>看一下global<br><img src="https://img-blog.csdnimg.cn/20210208171051916.png" alt="在这里插入图片描述"><br>shift+E可以导出数据<br><img src="https://img-blog.csdnimg.cn/20210208171118232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = [<span class="string">&#x27;f&#x27;</span>, <span class="number">0x0A</span>, <span class="string">&#x27;k&#x27;</span>, <span class="number">0x0C</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">0x0D</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;p&#x27;</span>, <span class="number">0x19</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">0x1F</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">0x0E</span>, <span class="string">&#x27;g&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">0x0F</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;O&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i], <span class="built_in">str</span>)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i - <span class="number">1</span>], <span class="built_in">str</span>)):</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ str1[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x += <span class="built_in">chr</span>(str1[i] ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>flag{QianQiuWanDai_YiTongJiangHu}</p>
]]></content>
      <categories>
        <category>BUUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk安装与配置</title>
    <url>/2021/02/08/jdk%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>搜索jdk下载jdk1.8<br>安装，注意路径<br>设置JAVA_HOME:<br><img src="https://img-blog.csdnimg.cn/20210208183934507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置path变量：<br><img src="https://img-blog.csdnimg.cn/20210208184100235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意此处已经自动生成了<em>C:\Program Files (x86)\Common Files\Oracle\Java\javapath。</em><br>不需要再配置classpath，如果配置了，可能会在编译java程序时造成”错误: 找不到或无法加载主类“<br>具体参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_44527588/article/details/102596461">https://blog.csdn.net/weixin_44527588/article/details/102596461</a></p>
</blockquote>
<p>配置完成后，在cmd输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version  </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020819175586.png" alt="在这里插入图片描述"><br>如图所示<br>即可</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse3-不一样的flag-SimpleRev-Java逆向解密</title>
    <url>/2021/02/18/reverse3-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag-SimpleRev-Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>@<a href="BUUCTF">TOC</a></p>
<h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p><img src="https://img-blog.csdnimg.cn/20210208210231939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可知Str2为下图所示<br><img src="https://img-blog.csdnimg.cn/20210208204808284.png" alt="在这里插入图片描述"><br>故而查看函数<code>sub_4110BE</code> 对Str进行处理看看做了什么处理<br><img src="https://img-blog.csdnimg.cn/20210208211009174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到后面Dst会经过aAbcdefghijklmn[]数组的变换，我们看看<code>aAbcdefghijklmn[64]</code>里有什么<br><img src="https://img-blog.csdnimg.cn/20210208211124794.png" alt="在这里插入图片描述"><br>base64</p>
<p>编写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str2=<span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">x=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str2)):</span><br><span class="line">    x+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i])-i)</span><br><span class="line">x=base64.b64decode(x)</span><br><span class="line">x = x.decode(<span class="string">&#x27;ASCII&#x27;</span>)  <span class="comment">#将字符处理成ASCII码形式</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>flag{i_l0ve_you}</p>
<h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p><img src="https://img-blog.csdnimg.cn/20210208213523589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开头有一个内存拷贝，点进去看下：<br><img src="https://img-blog.csdnimg.cn/20210208213616417.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208213635194.png" alt="在这里插入图片描述"><br>提示信息是让上下左右移动，迷宫题，可知是遇到1则退出，最终需要走到#，是一个横向是5的迷宫</p>
<p>*1111</p>
<p>01000</p>
<p>01010</p>
<p>00010</p>
<p>1111#</p>
<p>*为起点，#为终点，所路径为222441144222</p>
<p>flag{222441144222}</p>
<h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p><img src="https://img-blog.csdnimg.cn/20210208214331716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看<code> Decry();</code>函数<br><img src="https://img-blog.csdnimg.cn/20210209220639645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以求出改变前的str2就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;adsfkndcls&#x27;</span></span><br><span class="line">d = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">str2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">    <span class="keyword">for</span> v1 <span class="keyword">in</span> d:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(text[i]) == (<span class="built_in">ord</span>(v1) - <span class="number">39</span> - <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(text)]) + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>:</span><br><span class="line">            str2 += v1</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure>
<p>flag{KLDQCUDFZO}</p>
<h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><p>jd-gui打开<br><img src="https://img-blog.csdnimg.cn/2021020922214594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>java代码，很直白</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">     flag+=<span class="built_in">chr</span>(key[i]-<span class="number">64</span>^<span class="number">0x20</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
<p>flag{This_is_the_flag_!}</p>
]]></content>
      <categories>
        <category>BUUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>C++跨平台开发（VS2019+WSL(Ubuntu))</title>
    <url>/2021/03/01/C++%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88VS2019+WSL(Ubuntu))/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><em>由于实验室任务要求，特学习了一下如何跨平台开发项目，时间有点长了，如有疏漏，还请包涵指正！</em></p>
<p>我们在开发项目的过程中，有时候会进行跨平台开发，例如，我们需要开发Linux项目，但是受到条件限制，目前只有Windows环境，如何在Windows环境下进行Linux项目开发就成了迫切的需要。</p>
<p>本篇介绍利用在Windows下使用VS2019编写CMake并连接WSL的方式进行Linux项目的开发。</p>
<h5 id="预备介绍"><a href="#预备介绍" class="headerlink" title="预备介绍"></a>预备介绍</h5><p>WSL（windows下的Linux子系统）：Windows Subsystem for Linux（简称WSL）是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。<br>使用WSL不需要进行ssh连接，更加方便。</p>
<p>Cmake:CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。它能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性,类似UNIX下的automake。只是 CMake 的组态档取名为 CMakeLists.txt。</p>
<h5 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h5><p>在控制面板里面找到程序与功能，打开启用或关闭Windows功能<br><img src="https://img-blog.csdnimg.cn/20210301201810626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到适用于Linux的Windows子系统，并勾选。<br><img src="https://img-blog.csdnimg.cn/20210301201933452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开始安装，之后会要求重启一次。<br>打开Windows应用商城（ Microsoft Store），搜索WSL，下载Ubuntu（过程可能会有点满，耐心等待）<br><img src="https://img-blog.csdnimg.cn/20210301202358604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装完成之后，打开，设置用户名和密码，一开始的源可能比较慢，可以换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu/mirrors.aliyun/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu/mirrors.aliyun/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get upgrade    //更新已安装的包到最新，这个是可选的</span><br></pre></td></tr></table></figure>
<p>附上其它一些apt命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>
<p>要配置WSL安装使其与Visual Studio一起使用，需要安装以下工具：编译器（GCC或Clang），gdb，rsync和zip。如果使用的是CMake，则还需要安装基础的构建系统（Ninja或Unix Makefile）。可以通过以下命令将它们安装在使用apt的发行版中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install g++ gdb make ninja-build rsync zip</span><br></pre></td></tr></table></figure>
<p>另外，如果想要使用SSH连接，请参考这篇文章：<br><a href="https://www.jianshu.com/p/cc8c8abcbf2e">使用SSH连接Windows10中的Linux子系统</a></p>
<h5 id="安装开发Linux的VS2019"><a href="#安装开发Linux的VS2019" class="headerlink" title="安装开发Linux的VS2019"></a>安装开发Linux的VS2019</h5><p>VS2019的安装可以直接在官网下载，注意30天试用期，可以激活来获取更长的使用期限。</p>
<p>下面主要介绍一下如何配置：<br>开发Linux，安装程序打开后，选择Modify，然后单击Workloads选项卡。向下滚动到“其他工具集”，然后选择带有C ++工作负载的Linux开发。<br><img src="https://img-blog.csdnimg.cn/20210301205916145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认情况下，对Linux的CMake支持是选中的。</p>
<p>开启一个Cmake项目，进入管理配置：<br><img src="https://img-blog.csdnimg.cn/20210301210651184.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210301210712628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择WSL-GCC-Debug，这个需要看你的WSL上安装的是G++还是Clang,参考WSL的准备<br><img src="https://img-blog.csdnimg.cn/20210301210804198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择刚刚安装的Ubuntu<br><img src="https://img-blog.csdnimg.cn/20210301210840576.png" alt="在这里插入图片描述">选中WSL-GCC-Debug的配置<br>选中新配置后一般会出现上面两个红框的内容：第一个是由于远程生成需要对方Linux系统安装支持的Cmake版本；第二个是由于每个配置都有各自的CMake缓存，所以需要生成一次。<br><img src="https://img-blog.csdnimg.cn/20210301210931983.png" alt="在这里插入图片描述"><br>先点击“是”安装CMake，安装好以后点击“生成+”生成CMake Cache。首先选择“是”，点击以后会自动安装WSL的CMake。如下：<br><img src="https://img-blog.csdnimg.cn/20210301211044745.png" alt="在这里插入图片描述"><br>可能还会有许多其它问题，这里强烈安利这篇文章，写的非常好：<br><a href="https://blog.csdn.net/luoyu510183/article/details/105847329">VS2019 C++的跨平台开发——Cmake项目（二）</a></p>
<p>都配置好之后就可以进行开发了</p>
<p>至于Cmake文件的编写，这里就不过多赘述了，可以参考以下几篇文章：<br><a href="https://blog.csdn.net/luoyu510183/article/details/105151127">VS2019 C++的跨平台开发——Cmake项目（一）</a><br><a href="https://blog.csdn.net/yiminghd2861/article/details/85413408">CMake：CMakeLists.txt文件的编写语法</a><br><a href="https://www.cnblogs.com/rookiezjz/p/12347656.html">CMake 用法总结（转载）
</a></p>
<p>可以拿这个项目练练手:<br><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">编写一个Linux调试器</a></p>
<p>参考资料：<br><a href="https://blog.csdn.net/foxriver_gjg1989/article/details/102854440">利用vs2019编译器远程调试linux程序（走心版）</a><br><a href="https://devblogs.microsoft.com/cppblog/c-with-visual-studio-2019-and-windows-subsystem-for-linux-wsl/">C ++与Visual Studio 2019和Windows子系统的Linux（WSL）</a><br><a href="https://docs.microsoft.com/zh-cn/cpp/linux/connect-to-your-remote-linux-computer?view=msvc-160#connect-to-wsl">在 Visual Studio 中连接到你的目标 Linux 系统</a><br><a href="https://docs.microsoft.com/en-us/cpp/linux/cmake-linux-project?view=msvc-160">在Visual Studio中创建CMake Linux项目</a><br><a href="https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019">Visual Studio中的CMake项目</a><br><a href="https://docs.microsoft.com/en-us/cpp/linux/download-install-and-setup-the-linux-development-workload?view=msvc-160&viewFallbackFrom=vs-2019">下载，安装和设置Linux工作负载</a><br><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a><br><a href="https://www.jianshu.com/p/80289094d225">WSL-Ubuntu 更换apt源为阿里源</a><br><a href="https://blog.csdn.net/luoyu510183/article/details/105151127">VS2019 C++的跨平台开发——Cmake项目（一）</a><br><a href="https://blog.csdn.net/luoyu510183/article/details/105847329">VS2019 C++的跨平台开发——Cmake项目（二）</a><br><a href="https://www.jianshu.com/p/cc8c8abcbf2e">使用SSH连接Windows10中的Linux子系统</a><br><a href="https://devblogs.microsoft.com/cppblog/using-visual-studio-for-cross-platform-c-development-targeting-windows-and-linux/">使用Visual Studio进行针对Windows和Linux的跨平台C ++开发</a><br><a href="https://devblogs.microsoft.com/cppblog/intellisense-for-remote-linux-headers/">用于远程Linux标头的IntelliSense</a><br><a href="https://blog.csdn.net/yiminghd2861/article/details/85413408">CMake：CMakeLists.txt文件的编写语法</a><br><a href="https://www.cnblogs.com/rookiezjz/p/12347656.html">CMake 用法总结（转载）</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>安恒笔记-逆向工程（01基础介绍）</title>
    <url>/2021/03/02/%E5%AE%89%E6%81%92%E7%AC%94%E8%AE%B0-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%EF%BC%8801%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><strong><em>本文为安恒课程学习记录，绝大部分资料来自于安恒。</em></strong></p>
<h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><p>基础：<br>C,C++，汇编，windows编程<img src="https://img-blog.csdnimg.cn/20210302085722263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进阶：<br>工具使用，简单实战<br><img src="https://img-blog.csdnimg.cn/20210302085917366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实战：<br>软件破解，逆向分析<br><img src="https://img-blog.csdnimg.cn/20210302090019677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="OllyDbg窗口介绍"><a href="#OllyDbg窗口介绍" class="headerlink" title="OllyDbg窗口介绍"></a>OllyDbg窗口介绍</h3><p>寄存器窗口：<br><img src="https://img-blog.csdnimg.cn/20210302090847417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>日志窗口：<br>L图标或View-&gt;Log，显示日志窗口，通过配置，可以显示OllyDbg启动时保存在日志窗口的不同类型信息，也涉及条件断点的信息。这个窗口最重要的选项就是可以保存到文件。如果我们想把信息保存为文本文件，点击右键选择Logtofile。</p>
<p>模块窗口：<br>E按钮View-&gt;Executables显示程序运行使用的模块：exe,，dll,，ocx和其它。</p>
<p>内存窗口：<br>M按钮或View-&gt;Memory显示我们的程序映射到内存的信息，一个内存块可能被分为几个部分。右键点击可以搜索不同种类的字符串，可以在访问上设置中断。</p>
<p>线程窗口：<br>T按钮或View-&gt;Threads显示程序的线程窗口。</p>
<p>句柄窗口：<br>H按钮或View-&gt;Handles，句柄窗口。</p>
<p>修改、调用栈窗、断点窗口：<br>P按钮或View-&gt;Patches，如果程序经过了修改，这里显示修改的信息，没有被修改过程序就为空白。<br>K按钮或View-&gt;Callstack显示调用堆栈的窗口信息，可以尝试反向跟踪函数的调用顺序。<br>B按钮或View-&gt;Breakpoints显示程序普通断点的列表窗口，这里不显示硬件断点和内存断点。</p>
<p>参考窗口、跟踪窗口：<br>R按钮或View-&gt;Reference参考窗口，显示我们在OllyDbg中搜索的结果。<br>“…”按钮或View-&gt;Runtrace显示RUNTRACE（RUN跟踪)命令的结果。这里我们也可以通过Logtofile保存输出结果到文件。</p>
<h3 id="OllyDbg操作快捷键"><a href="#OllyDbg操作快捷键" class="headerlink" title="OllyDbg操作快捷键"></a>OllyDbg操作快捷键</h3><p>单步步入(F7)：<br>执行一行代码，遇到CALL 等子程序时会进入其中，进入后首先会停留在子程序的第一条指令上。<br>单步步过(F8)：<br>执行一行代码，遇到CALL 等子程序不进入其代码。<br>运行(F9)：<br>运行调试程序，直到遇到断点停止运行。当程序运行时，在OllyDbg 的右下角会显示单词Running。<br>暂停(F12)：临时暂停程序。<br>终止(DEBUG-&gt; CLOSE)：终止程序。</p>
<h3 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h3><p><strong>函数的调用约定</strong><br>是对函数调用的一个约束和规定(规范)，描述了函数参数是怎么传递和由谁清除堆栈的。<br>它决定以下内容：(1)函数参数的压栈顺序，(2)由调用者还是被调用者把参数弹出栈，(3)以及产生函数修饰名的方法</p>
<p>__cdecl：<br>cdecl调用约定又称为C调用约定，是c/c++语言缺省的调用约定。参数按照从右至左的方式入栈，函数本身不清理栈，此工作有调用者负责，返回值在eax中。由于由调用者清理栈，所以允许可变参数函数存在。</p>
<p>__stdcall：<br>stdcall很多时候被称为pascal调用约定。pascal语言是早期很常见的一种教学用计算机程序设计语言，其语法严谨，参数按照从右至左的方式入栈，函数自身清理堆栈，返回值在eax中。</p>
<p>__fastcall:<br>fastcall的调用方式运行相对快，因为它通过寄存器来传递参数。它使用ecx和edx传送两个双字或更小的参数，剩下的参数按照从右至左的方式入栈，函数自身清理堆栈，返回值在eax中。</p>
<p><img src="https://img-blog.csdnimg.cn/20210302100825374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>__thiscall:<br>__thiscall是C++类成员函数缺省的调用约定，但它没有显示的声明形式。因为在C++类中，成员函数调用还有一个this指针参数，因此必须特殊处理<br>参数入栈：参数从右向左入栈<br>this指针入栈：如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入栈。<br>栈恢复：对参数个数不定的，调用者清理栈，否则函数自己清理栈。</p>
<p>参考资料：<br><a href="https://blog.csdn.net/luoweifu/article/details/52425733">带你玩转Visual Studio——调用约定__cdecl、__stdcall和__fastcall</a></p>
<h3 id="OD设置断点"><a href="#OD设置断点" class="headerlink" title="OD设置断点"></a>OD设置断点</h3><p>普通断点：<br>在命令窗口使用[BP addr]命令<br>在想要下断点的指令地址处按F2<br>双击汇编窗口想要下断点的指令行的十六进制区域</p>
<p>查看断点：<br>断点下好之后，对应的地址处回变红。<br>可以在断点窗口看到所有断点。</p>
<p>编辑断点：<br>在断点窗口中进行。选中断点，右击。<br>Remove(删除):从列表中删除断点。<br>Disable(禁止):禁用断点但并不将断点从列表中删除。禁用时,断点并不会触发。<br>Edit condition(编辑条件):给断点设置触发条件。<br>Follow in disassembler(反汇编窗口中跟随):在反汇编窗口中显示断点。<br>Disable all or enable all(全部禁止):禁用/启用列表中的全部断点。<br>Copy to Clipboard(复制到剪贴板):把选中断点的信息复制到剪贴板。</p>
<h3 id="断点设置原理（普通断点）"><a href="#断点设置原理（普通断点）" class="headerlink" title="断点设置原理（普通断点）"></a>断点设置原理（普通断点）</h3><p>当我们设置断点后,OD会将对应指令处第一个字节指令替换成CC（例如，EAX的值本应为0xC7C30174，但实际上却变成了0xC7C301CC）。但是为了不影响界面显示效果,OD会将CC显示为原字节。但是,我们可以在内存单元中读取出其真实的内容,并且可以在反调试中用此方法来检测断点。<br><img src="https://img-blog.csdnimg.cn/20210302110647816.png" alt="在这里插入图片描述"></p>
<h3 id="OD设置API断点"><a href="#OD设置API断点" class="headerlink" title="OD设置API断点"></a>OD设置API断点</h3><p>API断点可以通过在命令窗口输入<br>BP API函数名 来进行设置<br>例如:<code>BP MessageBoxA</code><br>此处必须指定API函数的确切名称,而且<strong>大小写敏感</strong>。<br>BPX命令可以给引用或者调用了指定API函数的指令都下断点。例如:<code>BPX MessageBoxA</code></p>
<h3 id="特殊断点"><a href="#特殊断点" class="headerlink" title="特殊断点"></a>特殊断点</h3><p><strong>1.内存访问断点：</strong><br>这种类型的断点修改内存页的访问属性。当前我们设置了内存断点。任何代码访问(读,写或者执行代码)了该处代码的话,都会触发异常。</p>
<p>内存访问断点有两个缺点:<br>(1)它们不会出现[B]断点列表中和其他的地址。所以,你必须记得设置在什么地址处。<br>(2)不能同时设置多个内存断点。如果你设置了一个那么你之前设置的就会被自动删除。</p>
<p>删除内存断点：<br>可以数据窗口中单击鼠标右键选择-Breakpoint-Remove memory breakpoint。还可以设置一个新的内存断点,旧的内存断点会自动被删除。</p>
<p>“Memory,on access”是内存访问断点(读或者写),“Memory,on write”是内存写断点。OD也可以对区段设置内存断点,我们打开内存窗口，选择区段设置断点。</p>
<p>在同一个API函数中,如果通过bp命令设置断点会被程序检测而导致断点失效的话,也许设置内存访问断点可以绕过这个检测。设置内存访问断点这个方法也可以通过检测内存页的属性并恢复内存页的属性来进行保护,但是这在反调试技巧中并不常见。</p>
<p><strong>2.硬件断点：</strong><br>硬件断点(简称:HBP)是处理器的特性之一,设置硬件断点可以使程序中断下来。在OD中我们最多可以设置4个硬件断点。</p>
<p>硬件断点分为:硬件执行断点(ON EXECUTION),硬件写入断点(ON WRITE),硬件访问断点(ON ACCESS)3种。硬件执行断点与普通的CC断点作用一样,但硬件执行断点并不会将指令首字节修改为CC,所以更难检测。<br>可以通过命令：<br>HE 地址<br>例如：<code>HE 401013</code>来设置硬件执行断点</p>
<p>OD中有个特殊的窗口,通过它我们可以查看和管理硬件断点。我们选择菜单栏中的Debug-Hardware breakpoints就可以打开这个窗口。</p>
<p>在硬件断点窗口中,如果我们单击Follow按钮,反汇编窗口中该硬件断点所对应的那一行指令就会灰色高亮显示。如果我们单击Delete按钮,那么相应的硬件断点就会被清除。</p>
<p>如果我们重启OD,可以看到硬件断点依然存在。</p>
<p>硬件访问/写入断点是断在触发硬件断点的下一条指令处，跟内存断点不一样,内存断点会断在触发断点指令处。</p>
<p><strong>3.条件断点：</strong><br>条件断点实际上就是普通的CC断点,只不过该断点的触发需要满足设置的条件,如果满足设置的条件,那么程序就会中断下来,如果不满足条件的话,就和没有设置CC断点差不多。</p>
<p>单击鼠标右键选择-Breakpoint-Conditional，即可设置条件断点。<br>例如，如果你想当前EAX等于400000的时候,程序中断下来,那么条件应该写成:“EAX == 400000”。<br><img src="https://img-blog.csdnimg.cn/2021030218480285.png" alt="在这里插入图片描述"><br>设置了条件断点的语句地址显示的是粉红色。<br>我们在主菜单项中选择-Help-Contents。<br><img src="https://img-blog.csdnimg.cn/20210302185237347.png" alt="在这里插入图片描述"><br>选择超链接Breakpoints,紧接着选择超链接expression。<br><img src="https://img-blog.csdnimg.cn/20210302185313373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即可访问OD文档中对条件表达式的规定以及示例。</p>
<p><strong>4.条件记录断点：</strong><br>条件记录断点跟条件断点差不多,区别在于,我们可以通过设置该断点来记录下设置的条件的精确值。例如，我们给一个API函数设置条件记录断点,程序中有很多地方调用了这个API函数,通过该条件记录断点我们可以精确的记录程序中每处调用该API函数传递给它的内容。</p>
<p>在反汇编窗口中单击鼠标右键选择-Goto-Expression转到MessageBoxA函数的入口处。单击鼠标右键选择-Breakpoint-Conditional log即可设置条件记录断点。</p>
<p>既然我们不想程序中断下来,那么Condition(条件)编辑框这一栏我们就不填,Pause program(中断程序)这个单选按钮选着Never(不中断)即可。Expression(表达式)这个编辑框我们填写[ESP],我们知道在API函数的入口处,栈顶存放的是函数的返回地址。接着,Log value of expression(记录表达式的值)这个单选按钮我们选择Always(总是),即总是记录表达式的值,也就是[ESP]的值。Log function arguments(记录函数参数)这个单选按钮我们也选择Always(总是),即记录函数的参数个数/参数内容。<br><img src="https://img-blog.csdnimg.cn/20210302191552933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>F9键运行程序。看日志窗口什么也没有记录,因为MessageBoxA并没有被调用。我们打开注册窗口,输入指定的用户名和序列号。<br>可以查看日志窗口，会记录函数调用的信息，只有满足了设置的条件才会断下来，否则是记录。</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>java-基础</title>
    <url>/2021/03/08/java-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><a href="https://www.bilibili.com/video/BV12J41137hu">学习资料</a></p>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello,world!"></a>hello,world!</h2><p><img src="https://img-blog.csdnimg.cn/20210302210024489.png" alt="在这里插入图片描述"><br>下载这个软件，打开，按照下图方式新建<br><img src="https://img-blog.csdnimg.cn/20210302205934981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>比如，我们创建一个hello类<br><img src="https://img-blog.csdnimg.cn/20210302210127661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>psvm可以自动生成main方法<br><img src="https://img-blog.csdnimg.cn/20210302210455185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sout可以快捷生成system.out<br><img src="https://img-blog.csdnimg.cn/20210302210832682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>hello,world!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行<br><img src="https://img-blog.csdnimg.cn/20210302210913129.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210302211059209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是新建一个公开类，名叫hello</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br></pre></td></tr></table></figure>
<p>这是一个main方法，（）里面传了一个参数</p>
<h2 id="规范新建一个大型项目"><a href="#规范新建一个大型项目" class="headerlink" title="规范新建一个大型项目"></a>规范新建一个大型项目</h2><p>新建一个空项目：<br><img src="https://img-blog.csdnimg.cn/20210302212820669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>起一个名字，选一个地址<br><img src="https://img-blog.csdnimg.cn/2021030221290755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>新建一个模块<br><img src="https://img-blog.csdnimg.cn/20210302213028411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210302213238198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入名字之后就可以看到src了<br><img src="https://img-blog.csdnimg.cn/20210302213325132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>工具栏点击<br><img src="https://img-blog.csdnimg.cn/20210302213604123.png" alt="在这里插入图片描述"><br>选择相应的版本<br><img src="https://img-blog.csdnimg.cn/20210302213656760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>OK之后就可以像之前介绍的那样新建一个类开始了</p>
<h2 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* javadoc:文档注释</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> Helloworld</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>1.所有标识符都应该以<code>大小写字母，$或者_</code>为首字母开始，后面的可以<code>大小写字母，$或者_和数字</code>。<br>2.标识符大小写敏感。<br>3.不可以使用关键字作为变量名或者方法名。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java的所有变量必须先定义后使用。<br><strong>基本类型：</strong><br><img src="https://img-blog.csdnimg.cn/20210304164937146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210304165539926.png" alt="在这里插入图片描述"><br>最好完全避免使用浮点数比较，因为浮点数是离散的，存在舍入误差<br><img src="https://img-blog.csdnimg.cn/20210304170506322.png" alt="在这里插入图片描述"></p>
<p>类型转换：<br><img src="https://img-blog.csdnimg.cn/20210304170719581.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210304170933319.png" alt="在这里插入图片描述"><br>注意：不能对布尔值进行转换，且转换的时候可能存在内存溢出或者精度问题。<br><img src="https://img-blog.csdnimg.cn/20210304172456830.png" alt="在这里插入图片描述"><br>已经溢出了之后转换是没有用的了<br><strong>引用类型：</strong><br>String是引用类型。</p>
<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p><img src="https://img-blog.csdnimg.cn/20210304173526780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>局部变量（仅在方法内有效）必须声明和初始化值<br>实例变量:从属于对象，如果不自行初始化，这个类型的默认值为0 0.0，布尔值默认是false，除了基本类型其余的都是null。<br><img src="https://img-blog.csdnimg.cn/20210304174841984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>final是修饰符，写的时候不存在先后顺序<br><img src="https://img-blog.csdnimg.cn/20210304175329782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pro1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b=a++;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="keyword">int</span> c=++a;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://img-blog.csdnimg.cn/2021030710170369.png" alt="在这里插入图片描述"><br>总结就是：<br>a++是先执行完了a再加，<br>++a是先加上再执行<br>幂运算：<br><img src="https://img-blog.csdnimg.cn/20210307102534668.png" alt="在这里插入图片描述"><br>左移乘，右移除法</p>
<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p><img src="https://img-blog.csdnimg.cn/20210308144743520.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308145035144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308145057382.png" alt="在这里插入图片描述"><br>包头<br>例如packet com.baidu.operator必须放在最顶端<br>后面可以有导入的其它包，导入包的时候比如可以是<br>import java.util.Date;<br><img src="https://img-blog.csdnimg.cn/20210308145439520.png" alt="在这里插入图片描述"><br>使用*<br><img src="https://img-blog.csdnimg.cn/20210308145543439.png" alt="在这里插入图片描述"></p>
<h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><p> 此命令用来生成尽可能多显示中文的javadoc文档<br><img src="https://img-blog.csdnimg.cn/20210308150359920.png" alt="在这里插入图片描述"><br>使用IDLE生产javadoc文档<br>打开需要生成javadoc文档的代码，选择tools<br><img src="https://img-blog.csdnimg.cn/20210308151202514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择文件，选择存放的文件夹，添加要求命令：<br><img src="https://img-blog.csdnimg.cn/20210308151702345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成<br><img src="https://img-blog.csdnimg.cn/20210308151724625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>java-方法</title>
    <url>/2021/03/19/java-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><a href="https://www.bilibili.com/video/BV12J41137hu">学习资料</a></p>
<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>java.util.Scanner可以实现程序和人的交互。通过Scanner类来获取用户的输入。<br>基本语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
<p>下面给出一段示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;   <span class="comment">//使用Scanner类需要导入的外部包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">code01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">//从键盘接收数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方法接收：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext()) &#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close(); <span class="comment">//使用完之后需要关闭，凡是属于IO流的类，如果不关会占用资源，所以最好关掉。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNextLine()与hasNext()判断是否还有输入的数据。</p>
<p>next():<br>1.一定要读取到有效字符后才可以结束输入<br>2.对输入有效字符之前遇到的空白，next()方法会自动将其去掉，而对于之后的，会作为分隔符或者结束符<br>3.next()不能得到带有空格的字符串<br>例如：如果使用next()方法输入<code>hello world</code>，最后只能输出<code>hello</code></p>
<p>nextLine():<br>1.以Enter为结束符（回车）<br>2.可以输入空格<br>例如：如果使用nextLine()方法输入<code>hello world</code>，最后输出<code>hello world</code></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法包含于类或者对象中<br>方法在程序中被创建，在其它地方被引用<br><img src="https://img-blog.csdnimg.cn/20210319155505616.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210319155918952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>方法名称必须相同<br>参数列表必须不同（个数/类型/排列顺序）<br>方法的返回类型可以相同也可以不通婚<br>仅仅返回类型不同不足以成为方法的重载</p>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>因为不确定要传几个参数，所以使用可变参数<br>使用方法：<br>在方法声明中，在指定参数类型后加一个省略号（…)<br>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... number)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归结构包括两个部分：<br>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。<br>递归体：什么时候需要调用自身方法。<br><img src="https://img-blog.csdnimg.cn/20210319162956915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Nep欢乐个人赛-RE-hardsharp</title>
    <url>/2021/03/20/Nep%E6%AC%A2%E4%B9%90%E4%B8%AA%E4%BA%BA%E8%B5%9B-RE-hardsharp/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>(<del>这道题也是本菜鸡在参加的所有CTF比赛中独立解决的第一道题，谨做纪念）</del> </p>
<p>题目：<br>链接：<a href="https://pan.baidu.com/s/1ktDs3UPwUONpDKyIe0IlrQ">https://pan.baidu.com/s/1ktDs3UPwUONpDKyIe0IlrQ</a><br>提取码：86n1<br>复制这段内容后打开百度网盘手机App，操作更方便哦；</p>
<p>查壳，C#编写的<br><img src="https://img-blog.csdnimg.cn/20210320165226754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>dnSpy32打开， 定位到主函数<br><img src="https://img-blog.csdnimg.cn/20210320170037609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardcsharp.Program</span></span><br><span class="line"><span class="comment">// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	AesClass aesClass = <span class="keyword">new</span> AesClass();</span><br><span class="line">	<span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> strB = <span class="string">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&quot;</span>;</span><br><span class="line">	<span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="number">81</span>,</span><br><span class="line">		<span class="number">82</span>,</span><br><span class="line">		<span class="number">87</span>,</span><br><span class="line">		<span class="number">81</span>,</span><br><span class="line">		<span class="number">82</span>,</span><br><span class="line">		<span class="number">87</span>,</span><br><span class="line">		<span class="number">68</span>,</span><br><span class="line">		<span class="number">92</span>,</span><br><span class="line">		<span class="number">94</span>,</span><br><span class="line">		<span class="number">86</span>,</span><br><span class="line">		<span class="number">93</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="number">18</span></span><br><span class="line">	&#125;;</span><br><span class="line">	Console.WriteLine(<span class="string">&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;</span>);</span><br><span class="line">	<span class="built_in">string</span> text2 = Console.ReadLine();</span><br><span class="line">	<span class="keyword">if</span> (text2.Length != <span class="number">37</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">		Console.ReadKey();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (text2.Substring(<span class="number">0</span>, <span class="number">4</span>) != <span class="string">&quot;Nep&#123;&quot;</span> || text2[<span class="number">36</span>] != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">		Console.ReadKey();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		text += Convert.ToChar((<span class="built_in">int</span>)(array[i] ^ <span class="number">51</span>)).ToString();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">string</span>.Compare(aesClass.AesEncrypt(text2, text), strB) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">&quot;wow, you pass it!&quot;</span>);</span><br><span class="line">		Console.ReadKey();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">	Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由上面的代码，我们可以知道text是array[]和51异或后得到的结果，我们写个Python脚本求一下text</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">81</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">94</span>,<span class="number">86</span>,<span class="number">93</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>]</span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">     text+=<span class="built_in">chr</span>(array[i]^<span class="number">51</span>)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210320170310892.png" alt="在这里插入图片描述"><br>text=”badbadwomen!!!!!!!!!!!!!!!!!!!!!”<br>我们发现它将text和text2经过<code>aesClass.AesEncrypt（）</code>处理之后和strB相比较，相等的话即正确<br>text2由代码可知是Nep{……}，我们需要解出来的也就是这个<br>看一下<code>aesClass.AesEncrypt（）</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardcsharp.AesClass</span></span><br><span class="line"><span class="comment">// Token: 0x06000004 RID: 4 RVA: 0x00002148 File Offset: 0x00000348</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AesEncrypt</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(str))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line">	<span class="built_in">byte</span>[] array = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">	&#123;</span><br><span class="line">		Key = Encoding.UTF8.GetBytes(key),</span><br><span class="line">		Mode = CipherMode.ECB,</span><br><span class="line">		Padding = PaddingMode.PKCS7</span><br><span class="line">	&#125;.CreateEncryptor().TransformFinalBlock(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line">	<span class="keyword">return</span> Convert.ToBase64String(array, <span class="number">0</span>, array.Length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>普及一下：<br>CipherMode.ECB：AES加密解密（ECB模式）<br>PaddingMode.PKCS7：AES的一种填充模式<br>另外注意Base64和UTF-8</p>
<p>那这样就好办了<br>在线工具：<a href="http://tool.chacuo.net/cryptaes/">AES解密</a><br><img src="https://img-blog.csdnimg.cn/20210320171524798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag:Nep{up_up_down_down_B_a_b_A_Nep_nep~}</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>java-数组-对象-异常</title>
    <url>/2021/03/23/java-%E6%95%B0%E7%BB%84-%E5%AF%B9%E8%B1%A1-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><del>感觉这篇好水啊…</del> </p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>声明：dataType[] array;<br>例如：int[] num;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums;</span><br><span class="line">nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<p>Java使用new操作符来创建数组</p>
<p>获取数组长度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array.length</span><br></pre></td></tr></table></figure>
<p>数组也是对象，数组中的元素相当于对象的成员变量</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>静态方法可以在同一个包的另一个类中被调用，调用方法<br>类名.方法名();<br>非静态方法需要将类实例化才可以<br>例如，想要调用Student类中的say方法，<br>实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.say();</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210321102420938.png" alt="在这里插入图片描述"><br><strong>构造器</strong><br>一个类即使什么都不写，也会有一个方法，即为构造方法，也叫构造器<br>构造器的特点：<br>1.必须和类的名字相同<br>2.必须没有返回值，也不能写void<br>作用：<br>1.使用new构造器，必须要有构造器<br>2.用来初始化值</p>
<p>一旦有了有参构造，必须有一个无参<br><img src="https://img-blog.csdnimg.cn/2021032121201675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>alt+insert 自动生成构造器</p>
<p><strong>继承</strong><br>JAVA中只有单继承没有多继承</p>
<p>使用关键字 extends 表示<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br></pre></td></tr></table></figure>
<p>super:<br>1.调用父类的构造器，必须在子类方法的第一个<br>2.super必须只能出现在子类的方法或者构造方法中<br>3.super和this 不能同时调用构造方法</p>
<p>this:本身调用这个对象，没有继承也可以使用<br>super：代表父类对象的应用，只能在继承条件才可以使用</p>
<p><strong>重写</strong>：需要有继承关系，子类重写父类的方法<br>1.方法名必须相同<br>2.参数列表必须相同<br>3.修饰符范围可以扩大不可以缩小public&gt;protected&gt;default&gt;private<br>4.抛出的范围可以被缩小不可以扩大</p>
<p><strong>抽象类：</strong><br>1.不能new这个抽象类，只能靠子类去实现<br>2.抽象类中可以写普通的方法<br>3.抽象方法必须在抽象类中</p>
<p><strong>接口：</strong><br>声明接口的关键字是<code>interface</code><br>接口中的所有定义都是抽象的，且都是public abstract<br>接口都需要有实现类，使用implements<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></span><br></pre></td></tr></table></figure>
<p>接口中的方法必须要重写</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常处理五个关键字：<br>try、catch、finally、throw、throws</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Nep欢乐个人赛-RE-二十六进制</title>
    <url>/2021/03/28/Nep%E6%AC%A2%E4%B9%90%E4%B8%AA%E4%BA%BA%E8%B5%9B-RE-%E4%BA%8C%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>菜猫一只，对着大佬们的wp复现（好难啊…我好菜5555）<br>参考了官方wp和这位大佬的文章<br><a href="https://blog.csdn.net/weixin_45582916/article/details/115044301">REVERSE-COMPETITION-NEPCTF</a></p>
<p>题目链接：<br>链接：<a href="https://pan.baidu.com/s/1PzZ7uYlxSHjj9L7-iuWqjQ">https://pan.baidu.com/s/1PzZ7uYlxSHjj9L7-iuWqjQ</a><br>提取码：8lw2<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<p><img src="https://img-blog.csdnimg.cn/20210324214719922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>无壳，ida32位打开，交叉引用字符串<code>plz input right num:\n:</code>来到<code>sub_4010A0()</code>函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_4010A0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  dword_403378 = (<span class="keyword">int</span>)<span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">  Memory = (<span class="keyword">void</span> *)dword_403378;</span><br><span class="line">  *(_DWORD *)(dword_403378 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  sub_401020(<span class="string">&quot;plz input right num:\n&quot;</span>, Dst);</span><br><span class="line">  sub_401060(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;Dst);</span><br><span class="line">  v0 = atoi64(&amp;Dst);                            <span class="comment">// 将输入的字符转换为整型数字</span></span><br><span class="line">  sub_401120(v0, HIDWORD(v0));                  <span class="comment">// 对输入进行变换和检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入<code>sub_401120</code><br>这里普及一下<br>HIDWORD：指的是低位<br>LODWORD：指的是高位<br><img src="https://img-blog.csdnimg.cn/20210325165136179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关于13行的<code>sub_401F00</code>的解释<br><img src="https://img-blog.csdnimg.cn/20210324223235604.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210324223210364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关于v3==Fb72&gt;&amp;6的解释<br>我们之前在字符串窗口找到了flag right之类的字样，跳转过去之后发现了最后是判断aFb726<br><img src="https://img-blog.csdnimg.cn/20210325170324346.png" alt="在这里插入图片描述"><br>向上看之后发现<br><img src="https://img-blog.csdnimg.cn/20210325170645535.png" alt="在这里插入图片描述"><br>双击aFb726得到Fb72&gt;&amp;6</p>
<p>查看byte_402194<br><img src="https://img-blog.csdnimg.cn/2021032517310839.png" alt="在这里插入图片描述"><br>2163qwe)(*&amp;^%489$!057@#&gt;&lt;A</p>
<p>17行的sub_401160()应该是有比较，比较的内容就是v3</p>
<p>可以写脚本了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=<span class="string">&quot;2163qwe)(*&amp;^%489$!057@#&gt;&lt;A&quot;</span></span><br><span class="line">v3=<span class="string">&quot;Fb72&gt;&amp;6&quot;</span></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v3)):</span><br><span class="line">    v4=<span class="built_in">chr</span>(<span class="built_in">ord</span>(v3[i])^<span class="number">7</span>)</span><br><span class="line">    index=arr.find(v4)</span><br><span class="line">    flag.append(index)</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span>=(flag[i]+<span class="built_in">sum</span>)*<span class="number">26</span></span><br><span class="line"><span class="built_in">sum</span>+=flag[<span class="number">0</span>]</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>
<p>跑出来结果是：<br><img src="https://img-blog.csdnimg.cn/20210328102943556.png" alt="在这里插入图片描述"><br>flag：Nep{md5(518100101)}</p>
<p>以下是官方给出的本题的源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">源码:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进制加密的思路input_data: 518100101</span></span><br><span class="line"><span class="comment">加密后的数据: Fb72&gt;&amp;6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> jinzhi_table[] = <span class="string">&quot;2163qwe)(*&amp;^%489$!057@#&gt;&lt;A&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> jz = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">char</span> key[] = &#123; <span class="string">&quot;Fb72&gt;&amp;6&quot;</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;*head, * cur_node;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_the_flag</span><span class="params">()</span></span>; <span class="comment">// 检查flag 是否正确</span></span><br><span class="line"><span class="comment">//void wrong();</span></span><br><span class="line"><span class="comment">//void right();</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linklist_add</span><span class="params">(<span class="keyword">char</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">base_conversion</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del_linked</span><span class="params">(<span class="keyword">int</span> sum)</span></span>;</span><br><span class="line"><span class="keyword">int</span> v6 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> input[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x;</span><br><span class="line">head = cur_node = (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">cur_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;plz input right num:\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, input, <span class="number">32</span>);</span><br><span class="line">x = _atoi64(input);</span><br><span class="line">base_conversion(x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">base_conversion</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 进制转换</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">a = jinzhi_table[n % jz];</span><br><span class="line">n = n / jz;</span><br><span class="line">linklist_add(a ^ <span class="number">7</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;check_the_flag();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linklist_add</span><span class="params">(<span class="keyword">char</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cur_node-&gt;next = (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">cur_node-&gt;data = i;</span><br><span class="line">cur_node = cur_node-&gt;next;</span><br><span class="line">cur_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_the_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, sum = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">tmp</span> =</span> head;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%c&quot;, tmp-&gt;data);</span></span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;data == key[i]) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 链表释放内存</span></span><br><span class="line"><span class="keyword">int</span> code = del_linked(sum);</span><br><span class="line"><span class="keyword">if</span> (sum != <span class="number">8</span>) &#123;</span><br><span class="line"><span class="comment">/*right();*/</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;flag is Error!!!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//wrong();</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;flag is Right!!!, please md5(&#x27;Nep&#123;you_input_num&#125;&#x27;) submit th4</span></span><br><span class="line"><span class="string">flag&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del_linked</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp = sum;<span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cur_node = head;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur_node);</span><br><span class="line">tmp -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>java-基于Swing的图形界面设计（上）</title>
    <url>/2021/03/30/java-%E5%9F%BA%E4%BA%8ESwing%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>程序被设计出来，为了方便用户使用，一定是需要界面设计的</p>
<p>GUI技术以及支持包：<br>AWT:提供大量类和接口<br>Swing 是一个为Java设计的GUI工具包，JAVA基础类的一部分。Swing包括了图形用户界面（GUI）器件如：文本框，按钮，分隔窗格和表。</p>
<p>AWT:<code>java.awt</code>包<br>Swing:<code>javax.swing</code>包</p>
<p>本篇作为上篇，先介绍组件容器与布局管理器等知识点</p>
<p><strong>创建图形用户界面的一般步骤：</strong><br>创建容器–设置布局管理器–添加组件–事件处理</p>
<h3 id="常用的组件与容器"><a href="#常用的组件与容器" class="headerlink" title="常用的组件与容器"></a>常用的组件与容器</h3><p><strong>Swing中的容器分类：</strong><br>1.顶级容器：一般是一个顶层窗口（框架）<br>JFrame:用于框架窗口的类，应用程序至少使用一个框架窗口<br>JDialog:用于对话框的类<br>2.中间容器<br>JPanel:面板，是最灵活最常用的中间容器<br>JScrollPane:与JPanel类似，但还可以在大的组件或可扩展组件周围提供滚动条<br>JToolBar:按行或列排列一组组件（通常是按钮）</p>
<h5 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h5><p>在Swing程序中创建顶层窗口，允许将标签、按钮、文本框等组件添加其中</p>
<p>所有的JFrame框架顶层都有一个JRootPane面板，对于具有单一面板的窗体（JFrame），可以使用getContentPane()方法取得，并使用add()方法将组件加到面板上。<br><img src="https://img-blog.csdnimg.cn/20210323170745905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>setResizable(false)可以使最大化按钮失效<br>默认情况下，当用户关闭一个框架时，该框架会隐藏起来，而程序不会终止<br>dispose关闭窗口，并回收该窗口的所有资源（Windows）</p>
<p>参考示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;第一个java窗口&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setSize(<span class="number">300</span>,<span class="number">200</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        f.setLocationRelativeTo(<span class="keyword">null</span>);  <span class="comment">//框架居中</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setResizable(<span class="keyword">false</span>);  <span class="comment">//设置不能改变框架大小</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后的效果如图所示：<br><img src="https://img-blog.csdnimg.cn/20210323214426298.png" alt="在这里插入图片描述"><br>若想要改变框架的颜色，不能直接设置，必须设置框架内置的面板的颜色，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.getContentPane().setBackground(Color.BLACK);</span><br></pre></td></tr></table></figure>
<p>窗口就变成了<br><img src="https://img-blog.csdnimg.cn/20210323214752784.png" alt="在这里插入图片描述"></p>
<h5 id="JPanel"><a href="#JPanel" class="headerlink" title="JPanel"></a>JPanel</h5><p>JPanel面板是中间容器，没有标题，不能独立存在，必须将其添加到其它容器中。</p>
<p>面板与框架类似，也是一种容器，可以容纳其它GUI组件</p>
<p>JPanel类具有两个有用的<strong>特性</strong>：<br>本身是一个中间容器，能够容纳按钮、滚动条、文本框等用户界面元素；<br>有一个能够在上面进行绘制的表面，用来画文本和图形。<br><img src="https://img-blog.csdnimg.cn/20210328111540396.png" alt="在这里插入图片描述"><br><em>注意：坐标原点（0，0)在屏幕（或组件）的左上角，坐标单位是像素</em><br><img src="https://img-blog.csdnimg.cn/2021032811170352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;JPanel示例&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setSize(<span class="number">300</span>,<span class="number">200</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        f.setLayout(<span class="keyword">null</span>);  <span class="comment">//将布局管理器设为null</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();  <span class="comment">//创建面板</span></span><br><span class="line">        panel.setSize(<span class="number">150</span>,<span class="number">100</span>);  <span class="comment">//设置面板的宽和高</span></span><br><span class="line">        panel.setBackground(Color.CYAN);  <span class="comment">//设置面板的背景色</span></span><br><span class="line">        f.add(panel);  <span class="comment">//将面板添加到f中</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后效果如图所示：<br><img src="https://img-blog.csdnimg.cn/20210328112212701.png" alt="在这里插入图片描述"></p>
<h5 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h5><p>JButton(按钮)是常用组件之一，可以显示文本或图标<br><img src="https://img-blog.csdnimg.cn/20210328112709375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建文本按钮：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>创建图标按钮:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ImageIcon imageIcon = <span class="keyword">new</span> ImageIcon(<span class="string">&quot;pict.jpg&quot;</span>);</span><br><span class="line">imageIcon.setImage(imageIcon.getImage().getScaledInstance(<span class="number">40</span>,<span class="number">20</span>,Image.SCALE_DEFAULT));</span><br><span class="line">JButton button = <span class="keyword">new</span> JButton(imageIcon);</span><br></pre></td></tr></table></figure>
<p>创建带文本和图标的按钮：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>,imageIcon);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210329143040766.png" alt="在这里插入图片描述"><br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;JButton示例&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setSize(<span class="number">300</span>,<span class="number">200</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        JButton buttonOK,buttonCancel;</span><br><span class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());  <span class="comment">//将布局管理器设为null</span></span><br><span class="line">        buttonOK = <span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        buttonCancel = <span class="keyword">new</span> JButton(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">        f.add(buttonOK);</span><br><span class="line">        f.add(buttonCancel);  <span class="comment">//将面板添加到f中</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果如下：<br><img src="https://img-blog.csdnimg.cn/20210329143711156.png" alt="在这里插入图片描述"></p>
<h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>布局管理器负责确定每个组件的大小以及位置，当容器发生变化后还能够进行动态调整。</p>
<p>因为Java的组件不使用坐标这种绝对定位的形式，使用布局管理器进行定位能够使得程序界面自动适应不同分辨率的屏幕。</p>
<p>在使用布局管理器时，用户无法自己设置组件的大小和位置，即setLocation(),setSize(),setBounds()均无效</p>
<p><strong>布局管理器的分类：</strong><br>FlowLayout（流式布局）：Panel和Applet的缺省布局管理器<br>BorderLayout（边界布局）：JDialog和JFrame的缺省布局管理器，适合顶层容器使用<br>GridLayout（网络布局）：适合按钮类组件的布局<br>GridBagLayout（网格组布局）<br>CardLayout（卡片布局）：适合多功能程序使用<br>BoxLayout（箱式布局）<br>SpringLayout（弹簧布局）</p>
<p>每个容器都有缺省的布局管理器，在没有设置新的布局前，在容器中添加组件都按照该容器的缺省布局排列。</p>
<h5 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h5><p><img src="https://img-blog.csdnimg.cn/20210329145112508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>align表示对齐方式，取值为常量<br>每行组件默认居中对齐，组件之间的水平间距和垂直间距默认是5个像素</p>
<p>流式布局的优点：使用组件的最佳尺寸<br>流式布局的缺点：改变容器大小，组件相对位置会发生变化</p>
<p>设置默认的FlowLayout布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());</span><br></pre></td></tr></table></figure>
<p>设置框架f为组件左对齐的FlowLayout布局，并且组件的水平间距为20像素，垂直间距为40像素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT,<span class="number">20</span>,<span class="number">40</span>));</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlowLayoutDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayoutDemo</span><span class="params">(String title)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;FlowLayoutDemo&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setSize(<span class="number">260</span>,<span class="number">150</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        JButton button1 = <span class="keyword">new</span> JButton(<span class="string">&quot;第一个按钮&quot;</span>);</span><br><span class="line">        JButton button2 = <span class="keyword">new</span> JButton(<span class="string">&quot;第二个按钮&quot;</span>);</span><br><span class="line">        JButton button3 = <span class="keyword">new</span> JButton(<span class="string">&quot;第三个按钮&quot;</span>);</span><br><span class="line">        JButton button4 = <span class="keyword">new</span> JButton(<span class="string">&quot;第四个按钮&quot;</span>);</span><br><span class="line">        JButton button5 = <span class="keyword">new</span> JButton(<span class="string">&quot;第五个按钮&quot;</span>);</span><br><span class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());  <span class="comment">//将布局管理器设为null</span></span><br><span class="line">        f.add(button1);</span><br><span class="line">        f.add(button2);</span><br><span class="line">        f.add(button3);</span><br><span class="line">        f.add(button4);</span><br><span class="line">        f.add(button5);</span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FlowLayoutDemo(<span class="string">&quot;FlowLayout&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210330102022708.png" alt="在这里插入图片描述"></p>
<h5 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h5><p>边界布局管理器的布局分为五个位置：CENTER、EAST、WEST、NORTH、SOUTH<br>可以把组件放到任意一个位置，缺省位置是CENTER<br><img src="https://img-blog.csdnimg.cn/20210330104330929.png" alt="在这里插入图片描述"><br>每个区域只能添加一个组件，若添加多个，只能显示一个，如果想在一个区域添加多个组件，则必须先在该区域放一个容器，再将多个组件放在该容器。</p>
<p>优点：容器形状变化，组件相对位置不会变化，各区域和各组件大小会改变<br>North和South区域的高度保持不变<br>East和West区域的宽度保持不变<br>Center区域的组件随着容器的大小的变化而变化<br>缺点：直接使用该布局管理器只能放置五个组件</p>
<p>注意：不是组件之间的间距，是区域之间的间距。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BorderLayoutDomo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BorderLayoutDomo</span><span class="params">(String title)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame(title);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> BorderLayout(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        f.add(BorderLayout.NORTH,<span class="keyword">new</span> JButton(<span class="string">&quot;North&quot;</span>));</span><br><span class="line">        f.add(BorderLayout.SOUTH,<span class="keyword">new</span> JButton(<span class="string">&quot;South&quot;</span>));</span><br><span class="line">        f.add(BorderLayout.EAST,<span class="keyword">new</span> JButton(<span class="string">&quot;East&quot;</span>));</span><br><span class="line">        f.add(BorderLayout.WEST,<span class="keyword">new</span> JButton(<span class="string">&quot;West&quot;</span>));</span><br><span class="line">        f.add(BorderLayout.CENTER,<span class="keyword">new</span> JButton(<span class="string">&quot;Center&quot;</span>));</span><br><span class="line">        f.setSize(<span class="number">260</span>,<span class="number">180</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BorderLayoutDomo domo= <span class="keyword">new</span> BorderLayoutDomo(<span class="string">&quot;Exanple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210330105818952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h5><p>网络布局管理器将容器的空间划分为若干行和列的网格，每个网格大小相同<br>各组件的排列方式：从上到下，从左到右<br>组件放入容器的次序决定了它在容器中的位置<br>默认间距是0<br><img src="https://img-blog.csdnimg.cn/20210330131145116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>网格每列宽度相同，等于容器的宽度除以网格的列数<br>网格每行高度相同，等于容器的高度除以网格的行数<br>容器大小改变时，组件的相对位置不变，大小会改变<br>若组件数超过网格设定的个数，则布局管理器会自动增加网格个数，原则是保持行数不变。</p>
<p>优点：不受组件数量的限制<br>缺点：每个组件会占据网格全部的大小，自身的尺寸无法体现</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridLayoutDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    JButton button1,button2,button3,button4,button5;</span><br><span class="line">    GridLayoutDemo()</span><br><span class="line">    &#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;GridLayout&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        button1 = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">        button2 = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">        button3 = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line">        button4 = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮4&quot;</span>);</span><br><span class="line">        button5 = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮5&quot;</span>);</span><br><span class="line">        f.add(button1);</span><br><span class="line">        f.add(button2);</span><br><span class="line">        f.add(button3);</span><br><span class="line">        f.add(button4);</span><br><span class="line">        f.add(button5);</span><br><span class="line">        f.setSize(<span class="number">260</span>,<span class="number">180</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GridLayoutDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="https://img-blog.csdnimg.cn/20210330132507748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridFrame</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    JButton btn[];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GridFrame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;网格布局演示&quot;</span>);  <span class="comment">//创建容器</span></span><br><span class="line">        String str[]=&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>&#125;;</span><br><span class="line">        Container contentpane = f.getContentPane();</span><br><span class="line">        contentpane.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        btn=<span class="keyword">new</span> JButton[str.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">            btn[i]=<span class="keyword">new</span> JButton(str[i]);</span><br><span class="line">            contentpane.add(btn[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setSize(<span class="number">200</span>,<span class="number">200</span>);  <span class="comment">//设置容器大小</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);  <span class="comment">//设置框架可见性</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GridFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210330135816741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网格布局在组织窗口的局部区域比较有用<br>如果需要一行或者多行相同尺寸的按钮，可以把按钮放在一个面板里，该面板使用网格布局进行管理。</p>
<h5 id="CardLayout"><a href="#CardLayout" class="headerlink" title="CardLayout"></a>CardLayout</h5><p>将容器中的组件处理为一系列卡片，每一时刻只显示其中的一张卡片，可以在卡片之间进行切换。<br>此种布局方式可以帮助用户处理两个或者更多的组件共享同一显示空间，共享空间的组件之间的关系就像是一摞牌，只有最上面的组件是可见的。<br><img src="https://img-blog.csdnimg.cn/20210330140737298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>CardLayyout类有二种构造方法：<br><code>public CardLayout():</code>组件距容器左右边界和上下边界的距离为缺省值0个像素<br><code>public CardLayout(int horizontalGap,int verticalGap)：</code>组件距容器左右边界和上下边界的距离为指定值<br>每张牌中只能放置一个组件，如果想在一张牌中放置多个组件，则必须先在该牌放一个容器，再将多个组件放在该容器中<br>向容器中添加组件时可以为组件取一个名字，以提供更换显示组件时使用：<br>add(Component,String);</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardTest</span> <span class="keyword">extends</span> <span class="title">MouseAdapter</span></span>&#123;</span><br><span class="line">    JFrame f;</span><br><span class="line">    Container contentPane;</span><br><span class="line">    CardLayout myCard;</span><br><span class="line">    Container c;</span><br><span class="line">    JPanel p1,p2,p3;</span><br><span class="line">    JLabel l1,l2,l3;</span><br><span class="line">    CardTest()&#123;</span><br><span class="line">        f=<span class="keyword">new</span> JFrame(<span class="string">&quot;Card Test&quot;</span>);</span><br><span class="line">        contentPane = f.getContentPane();</span><br><span class="line">        myCard = <span class="keyword">new</span> CardLayout();</span><br><span class="line">        f.setLayout(<span class="keyword">new</span> CardLayout());</span><br><span class="line">        f.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">        p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">        p3=<span class="keyword">new</span> JPanel();</span><br><span class="line">        p1.setBackground(Color.ORANGE);</span><br><span class="line">        l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        p1.add(l1);</span><br><span class="line">        p2.setBackground(Color.pink);</span><br><span class="line">        l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;2nd&quot;</span>);</span><br><span class="line">        p2.add(l2);</span><br><span class="line">        p3.setBackground(Color.CYAN);</span><br><span class="line">        l3=<span class="keyword">new</span> JLabel(<span class="string">&quot;3rd&quot;</span>);</span><br><span class="line">        p3.add(l3);</span><br><span class="line">        c = f.getContentPane();</span><br><span class="line">        c.add(p1,<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        c.add(p2,<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">        c.add(p3,<span class="string">&quot;Third&quot;</span>);</span><br><span class="line">        contentPane.setLayout(myCard);</span><br><span class="line">        myCard.show(c,<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        p1.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">        p2.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">        p3.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">        myCard.next(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CardTest ct = <span class="keyword">new</span> CardTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果，鼠标点击可以切换：<br><img src="https://img-blog.csdnimg.cn/20210330205733343.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210330205745446.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210330205800384.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>java-基于Swing的图形界面设计（下）</title>
    <url>/2021/04/01/java-%E5%9F%BA%E4%BA%8ESwing%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> 本篇主要介绍java的事件处理</p>
<p>如果想要界面中的组件和用户实现交互功能，则需要进行事件处理。</p>
<h3 id="事件处理三要素"><a href="#事件处理三要素" class="headerlink" title="事件处理三要素"></a>事件处理三要素</h3><p>事件： 用户在组件上执行某种操作，如单击按钮、选中复选框等，就是一个事件，鼠标键盘以及系统状态的改变都会引发事件，当发生事件时，系统会创建一个相应事件类的对象。<br>事件源：就是事件发生的场所，通常就是各个组件。<br>事件处理者：一旦发生了事件，程序就要做出相应执行某种操作，对事件做出响应的对象就是事件的处理者，也称为监听器。</p>
<h3 id="委托事件模型"><a href="#委托事件模型" class="headerlink" title="委托事件模型"></a>委托事件模型</h3><p>委托事件模型：由事件源将事件处理权委托给某个对象（监听器）这种事件处理方式<br>同一组件上的不同事件，可以交由不同的监听器处理。<br>委托事件模型可以提高事件处理的灵活性。</p>
<h3 id="事件处理的基本流程："><a href="#事件处理的基本流程：" class="headerlink" title="事件处理的基本流程："></a>事件处理的基本流程：</h3><p>首先组件将事件的处理权委托给某个对象，这个过程成为注册，对象就是监听器，在程序运行过程中，如果在组件上发生了这个事件，那么系统就生成一个事件类的对象，并将这个对象传给监听器，监听器执行相应的事件处理代码。<br><img src="https://img-blog.csdnimg.cn/20210330213637942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每个事件类一般对应于一个事件监听器的接口，两者的名字的前半部分相同。<br><img src="https://img-blog.csdnimg.cn/202103312006111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>监听器要有监听和处理XXXEvent事件的能力，它所在的类必须要实现XXXListener接口。</p>
<h3 id="监听器注册"><a href="#监听器注册" class="headerlink" title="监听器注册"></a>监听器注册</h3><p>所有的组件都从Component类中继承了将事件处理授权给监听器的方法（又称为“注册”）<br>格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">component.addXXXListener(listener);</span><br></pre></td></tr></table></figure>
<p>XXX因事件的不同而不同，括号中的参数是监听器对象，如果是组件所在的类做监听器类，那么这里就写成this<br>例如：为button1注册监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button1.addActionListener(<span class="keyword">new</span> ButtonEvent());</span><br><span class="line">button1.addActionLister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>取消注册：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">component.removeXXXListener(listener);</span><br></pre></td></tr></table></figure>
<h3 id="动作事件ActionEvent"><a href="#动作事件ActionEvent" class="headerlink" title="动作事件ActionEvent"></a>动作事件ActionEvent</h3><p>当用鼠标单击按钮、复选框、单选按钮或者菜单以及在文本框中输入回车时都会触发ActionEvent事件<br>负责处理ActionEvent事件的监听器类必须实现ActionListerner接口，实现接口里的actionPerformed()方法。</p>
<p>示例代码：<br>编写时候首先编写界面代码，组件包括框架和按钮，并对其进行必要的设置，在主方法中，创建这个类的对象即可。<br>在本类中定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventDemo</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    JFrame frame;</span><br><span class="line">    JButton button;</span><br><span class="line">    EventDemo(String title)&#123;</span><br><span class="line">        frame=<span class="keyword">new</span> JFrame(title);</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">260</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        button=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        frame.add(button);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EventDemo(<span class="string">&quot;动作事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        frame.setTitle(<span class="string">&quot;单击了确定按钮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210331211210310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单击确定按钮之后：<br><img src="https://img-blog.csdnimg.cn/20210331211236268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单独定义监听器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    JFrame frame;</span><br><span class="line">    JButton button;</span><br><span class="line">    EventDemo(String title)&#123;</span><br><span class="line">        frame=<span class="keyword">new</span> JFrame(title);</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">260</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        button=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        frame.add(button);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> ButtonEvent(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EventDemo(<span class="string">&quot;动作事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonEvent</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    EventDemo evd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonEvent</span><span class="params">(EventDemo eventDemo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.evd=eventDemo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        evd.frame.setTitle(<span class="string">&quot;单击了确定按钮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ActionEvent事件类的常用方法<br><code>public String getActionCommand()</code>返回与此动作有关的命令字符串<br><code>public Object getSource()</code>返回事件源对象，例如单击“确定”按钮，返回的是按钮对象名<code>button</code></p>
<h3 id="窗口事件与适配器类"><a href="#窗口事件与适配器类" class="headerlink" title="窗口事件与适配器类"></a>窗口事件与适配器类</h3><p><img src="https://img-blog.csdnimg.cn/20210331214419662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowEvendDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">        frame.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> QuitWindow());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuitWindow</span> <span class="keyword">implements</span> <span class="title">WindowListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WindowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们注意到，写的时候必须实现WindowListerner接口中的所有方法，这样很麻烦，所以我们要使用适配器来解决这个问题。</p>
<p><strong>常用适配器类</strong><br><img src="https://img-blog.csdnimg.cn/20210331215920533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可见，上述代码就可以简化成如下版本了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowEvendDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">        frame.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> QuitWindow());<span class="comment">//设置用户关闭框架时的响应动作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuitWindow</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WindowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>继承适配器类的处理</strong><br>一些监听器接口有适配器类，事件处理类可以继承事件所对应的适配器类，只需要覆盖必要的方法，无关方法不用实现<br>优点：提供了一种简单的实现监听器的手段，可以缩短程序代码<br>缺点：由于适配器是一个类而不是接口，因而处理事件的类只能继承一个适配器，当该类需要处理多种事件，需要多种监听器或此类已有父类时候，通过继承适配器类的方式是不可以的。</p>
<h3 id="使用内部类与匿名类进行事件处理"><a href="#使用内部类与匿名类进行事件处理" class="headerlink" title="使用内部类与匿名类进行事件处理"></a>使用内部类与匿名类进行事件处理</h3><p><strong>内部类</strong><br>外部类可以通过内部类的对象，引用内部类的成员。<br>内部类可以直接引用外部类的成员<br>例如：<br>用内部类实现窗口关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowEvendDemo</span> </span>&#123;</span><br><span class="line">    WindowEvendDemo() &#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">        frame.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> QuitWindow());<span class="comment">//设置用户关闭框架时的响应动作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QuitWindow</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WindowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WindowEvendDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>匿名类</strong><br>所谓匿名类就是该类没有类名<br>如果在程序中只创建内部类的一个对象，并且该内部类需要继承一个类或者实现一个接口，这是，可将内部类定义成匿名类<br>由于匿名类本身无名，因此就没有构造方法，它需要显式地调用父类或接口的构造方法<br>匿名类不能定义静态的成员<br>匿名类不能用4种权限、static、finally、abstract修饰<br>只可以创建一个匿名类实例<br>匿名类要覆盖父类的方法或实现接口中的方法</p>
<h3 id="鼠标和键盘事件"><a href="#鼠标和键盘事件" class="headerlink" title="鼠标和键盘事件"></a>鼠标和键盘事件</h3><p><strong>Graphics类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Graphics g = component.getGraphics() <span class="comment">//获取Graphics对象</span></span><br><span class="line">g.drawLine(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)<span class="comment">//绘制直线</span></span><br><span class="line">g.drawOval(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)<span class="comment">//绘制椭圆</span></span><br><span class="line">g.drawRect(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,intheight)<span class="comment">//绘制矩形</span></span><br><span class="line">g.fillOval(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)<span class="comment">//使用当前颜色填充外接指定矩形框的椭圆</span></span><br><span class="line">g.drawString(String str,<span class="keyword">int</span> x,<span class="keyword">int</span> y)<span class="comment">//绘制由指定string给定的文本</span></span><br><span class="line">clearRect(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)<span class="comment">//清除矩形</span></span><br><span class="line"><span class="function">Color <span class="title">getColor</span><span class="params">()</span><span class="comment">//获取当前颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color c)</span><span class="comment">//设置颜色</span></span></span><br></pre></td></tr></table></figure>
<p><strong>鼠标事件</strong><br>鼠标事件类<code>MouseEvent</code><br><img src="https://img-blog.csdnimg.cn/20210401153235406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>鼠标事件接口<code>MouseListener</code>和<code>MouseMotionListener</code><br>MouseListener：<br><img src="https://img-blog.csdnimg.cn/20210401153255770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对应的注册监听器的方法是addMouseListener()<br>mouseEvent.isMetaDown()可用来检测按下的是鼠标左键还是右键，为真是右键，为假是左键。<br>MouseMotionListener：<br><img src="https://img-blog.csdnimg.cn/20210401153545520.png" alt="在这里插入图片描述"><br>示例代码：<br>通过单击鼠标来画蓝色的圆点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawPoint</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MouseListener</span></span>&#123;</span><br><span class="line">    Graphics g;</span><br><span class="line">    JPanel pane;</span><br><span class="line">    DrawPoint()&#123;</span><br><span class="line">        setTitle(<span class="string">&quot;画图&quot;</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        setForeground(Color.BLUE);</span><br><span class="line">        pane=<span class="keyword">new</span> JPanel();</span><br><span class="line">        add(pane);</span><br><span class="line">        pane.setBackground(Color.YELLOW);</span><br><span class="line">        pane.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DrawPoint t = <span class="keyword">new</span> DrawPoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        g = pane.getGraphics();</span><br><span class="line">        g.fillOval(e.getX(),e.getY(),<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210401193748667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>键盘事件</strong><br>键盘事件类KeyEvent:<br><img src="https://img-blog.csdnimg.cn/20210401153857193.png" alt="在这里插入图片描述"><br>对应的监听器接口KeyListener:<br><img src="https://img-blog.csdnimg.cn/20210401153930654.png" alt="在这里插入图片描述"><br>常用KeyEvent类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getKeyChar</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>返回该事件中键的字符<br>例如shift+a按键事件返回值为A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKeyCode</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>返回键盘上实际键的整数代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKeyText</span><span class="params">(<span class="keyword">int</span> keyCode)</span></span></span><br></pre></td></tr></table></figure>
<p>返回描述键代码的字符串<br>例如HOME F1 A等等</p>
<p>示例代码：<br>综合鼠标事件和键盘事件，模拟一个电子白板，可以用鼠标在上面绘画，用键盘在上面写字。</p>
<p>由于多个方法中都会使用绘图对象g,因此可以在成员变量中声明g，这样各个方法中就不用重复声明和创建了，但要注意创建g时一定要在setVisible(true)方法的后面，否则就创建不成功。</p>
<p><img src="https://img-blog.csdnimg.cn/20210401194524771.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseAndKeyDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lastX = <span class="number">0</span>,lastY = <span class="number">0</span>;<span class="comment">//鼠标垫当前位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MouseAndKeyDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;白板&quot;</span>);</span><br><span class="line">        getContentPane().setBackground(Color.WHITE);</span><br><span class="line">        setForeground(Color.RED);</span><br><span class="line">        setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                lastX = e.getX();</span><br><span class="line">                lastY = e.getY();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        addMouseMotionListener(<span class="keyword">new</span> MouseMotionAdapter()&#123;<span class="comment">//鼠标拖动事件监听</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">                <span class="keyword">int</span> x=e.getX();</span><br><span class="line">                <span class="keyword">int</span> y=e.getY();</span><br><span class="line">                Graphics g = getGraphics();</span><br><span class="line">                g.drawLine(lastX,lastY,x,y);<span class="comment">//画线</span></span><br><span class="line">                lastX=x;</span><br><span class="line">                lastY=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;<span class="comment">//键盘事件监听</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">                String s = String.valueOf(e.getKeyChar());</span><br><span class="line">                getGraphics().drawString(s, lastX, lastY);</span><br><span class="line">                lastX += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MouseAndKeyDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210401201040117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完结撒花 ~</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-01Prepare</title>
    <url>/2021/04/01/Python-01Prepare/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<h3 id="在-Windows-设置环境变量"><a href="#在-Windows-设置环境变量" class="headerlink" title="在 Windows 设置环境变量"></a>在 Windows 设置环境变量</h3><p>在环境变量中添加Python目录：<br>在命令提示框中(cmd) : 输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path=%path%;C:\Python </span><br></pre></td></tr></table></figure>
<p>按下”Enter”。<br><strong>注意:</strong> C:\Python 是Python的安装目录。<br>也可以通过以下方式设置：</p>
<ul>
<li>右键点击”计算机”，然后点击”属性”</li>
<li>然后点击”高级系统设置”</li>
<li>选择”系统变量”窗口下面的”Path”,双击即可！</li>
<li>然后在”Path”行，添加python安装路径即可(我的D:\Python32)，所以在后面，添加该路径即 可。<br><strong>ps：记住，路径直接用分号”；”隔开！</strong></li>
<li>最后设置成功以后，在cmd命令行，输入命令”python”，就可以有相关显示。</li>
</ul>
<h3 id="查看Python版本："><a href="#查看Python版本：" class="headerlink" title="查看Python版本："></a>查看Python版本：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure>
<h3 id="Python中文编码（对Python2）："><a href="#Python中文编码（对Python2）：" class="headerlink" title="Python中文编码（对Python2）："></a>Python中文编码（对Python2）：</h3><p>Python 文件中如果未指定编码，在执行过程会出现报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你好，世界&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>以上程序执行输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> File <span class="string">&quot;test.py&quot;</span>, line <span class="number">2</span></span><br><span class="line">SyntaxError: Non-ASCII character <span class="string">&#x27;\xe4&#x27;</span> <span class="keyword">in</span> file test.py on line <span class="number">2</span>,</span><br><span class="line"> but no encoding declared; </span><br><span class="line"> see http://www.python.org/peps/pep-<span class="number">0263.</span>html <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure>
<p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。<br>解决方法为只要在文件开头加入 <code># -*- coding: UTF-8 -*-</code> 或者 <code># coding=utf-8</code> 就行了<br><strong>注意：</strong><code># coding=utf-8</code> 的 = 号两边不要空格。<br>Python3已无此问题。</p>
<p>在 Windows 下可以不写第一行注释:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br></pre></td></tr></table></figure>
<h3 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h3><p>1）编码：<br><img src="https://img-blog.csdnimg.cn/20210401203956153.png" alt="在这里插入图片描述">可以在PyCharm中进行选择。<br>2）标识符</p>
<ul>
<li>第一个字符必须是字母表中字母或下划线 _ 。</li>
<li>标识符的其他的部分由字母、数字和下划线组成。 </li>
<li>标识符对大小写敏感。</li>
<li>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</li>
</ul>
<p>3）Python保留字<br>Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>4）注释<br>Python中单行注释以 # 开头<br>多行注释可以用多个 # 号，还有 ‘’’ 和 “””：，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>5）缩进<br>python使用缩进来表示代码块，不需要使用大括号 {} 。<br>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。缩进不一致，会导致运行错误。<br>6）多行语句<br>Python 可以使用反斜杠()来实现多行语句，在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()<br>7）字符串</p>
<ul>
<li>python中单引号和双引号使用完全相同。</li>
<li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li>
<li>转义符 ‘&#39;</li>
<li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li>
<li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>
<li>Python中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"> </span><br><span class="line">print(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)        <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure>
8）<br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行并不是Python语法的一部分，但空行也是程序代码的一部分。Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。<br>9）Print 输出<br>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line">print( x )</span><br><span class="line">print( y )</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line">print( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>
10）import 与 from…import<br>在 python 用 import 或者 from…import 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为： import somemodule<br>从某个模块中导入某个函数,格式为： from somemodule import somefunction<br>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc<br>将某个模块中的全部函数导入，格式为： from somemodule import *<br>11）<br>当字符串内容为浮点型要转换为整型时，无法直接用 int() 转换：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;2.1&#x27;</span>  <span class="comment"># 这是一个字符串</span></span><br><span class="line">print(<span class="built_in">int</span>(a))</span><br></pre></td></tr></table></figure>
会报错 “invalid literal for int() “。<br>需要把字符串先转化成 float 型再转换成 int 型：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;2.1&#x27;</span></span><br><span class="line">print(<span class="built_in">int</span>(<span class="built_in">float</span>(a)))</span><br></pre></td></tr></table></figure>
输出 2。<br>12）Python3 基本数据类型<br>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>Python允许同时为多个变量赋值。例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure>
以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。<br>也可以为多个对象指定多个变量。例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure>
海象运算符：海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure>
如果不用该运算符，此段代码则要改写为:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">f&quot;List is to long(<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
在Python 3里，只有一种整数类型 int，表示为长整型。<br>内置的 type() 函数可以用来查询变量所指的对象类型。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">bool</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
此外还可以用 isinstance 来判断：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>13）列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure>
<p>与Python字符串不一样的是，列表中的元素是可以改变的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 []</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>]</span><br><span class="line">print(letters[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。<br>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure>
<p>14）字典是一种映射类型，字典用 { } 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - 菜鸟教程</span><br><span class="line"><span class="number">2</span> - 菜鸟工具</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;site&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;runoob&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>15）Python数据类型的转换<br><img src="https://img-blog.csdnimg.cn/2021040120493331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>16）位运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100 </span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101 </span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">c = a &amp; b        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a | b        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a ^ b        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = ~a           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure>
<p>以上计算结果分别为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">61</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">49</span></span><br><span class="line"><span class="number">4</span> - c 的值为： -<span class="number">61</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">240</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>17）Python字符串格式化<br>Python 支持格式化字符串的输出 。最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;我叫 %s 今年 %d 岁!&quot;</span> % (<span class="string">&#x27;小明&#x27;</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-02Start</title>
    <url>/2021/04/01/Python-02Start/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>学习资料来自于菜鸟教程，做个学习记录<br>1）if 语句<br>Python中if语句的一般形式如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure>
<p>2）while 循环<br>Python 中 while 语句的一般形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure>
<p>在 Python 中没有 do..while 循环。<br>3）while 循环使用 else 语句<br>在 while … else 在条件语句为 false 时执行 else 的语句块。<br>语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure>
<p>4）for 语句<br>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。<br>for循环的一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>
<p>5）range()函数<br>如果需要遍历数字序列，可以使用内置range()函数。它会生成数列。<br>可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">     print(i, a[i])</span><br><span class="line"> </span><br><span class="line"><span class="number">0</span> Google</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> Runoob</span><br><span class="line"><span class="number">3</span> Taobao</span><br><span class="line"><span class="number">4</span> QQ</span><br></pre></td></tr></table></figure>
<p>6）break和while<br>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。<br>continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。<br>while 中使用 break：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(n)</span><br><span class="line">print(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure>
<p>while 中使用 continue：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line">print(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure>
<p>7）函数<br>Python 定义函数使用 def 关键字，一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算面积函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">width, height</span>):</span></span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_welcome</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Welcome&quot;</span>, name)</span><br><span class="line"> </span><br><span class="line">print_welcome(<span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">w = <span class="number">4</span></span><br><span class="line">h = <span class="number">5</span></span><br><span class="line">print(<span class="string">&quot;width =&quot;</span>, w, <span class="string">&quot; height =&quot;</span>, h, <span class="string">&quot; area =&quot;</span>, area(w, h))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-03improve</title>
    <url>/2021/04/01/Python-03improve/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<h3 id="模块（import）"><a href="#模块（import）" class="headerlink" title="模块（import）"></a>模块（import）</h3><p>利用模块可以更加方便的使用Python实现一些功能<br>a)自定义模块<br>在Pycharm中新建一个Python文件，注意给它的命名最好是英文，否则可能Pycharm不识别。<br>如图所示：新建了一个文件，在其中写下自定义模块的内容<br><img src="https://img-blog.csdnimg.cn/20210401212943284.png" alt="在这里插入图片描述"><br>作用为打招呼<br>然后再新建一个Python文件，这个命名好像没有要求了<br>在第二个文件中输入import + 模块名，例如<br><img src="https://img-blog.csdnimg.cn/20210401213011128.png" alt="在这里插入图片描述"><br>运行即可调用之前写的自定义模块<br><img src="https://img-blog.csdnimg.cn/20210401213037580.png" alt="在这里插入图片描述"><br>也可以进行更改<br><img src="https://img-blog.csdnimg.cn/20210401213058698.png" alt="在这里插入图片描述"><br>运行结果为<br><img src="https://img-blog.csdnimg.cn/20210401213128234.png" alt="在这里插入图片描述"><br>自定义模块和路径查找有关通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br></pre></td></tr></table></figure>
<p> 可以看等等<br>b)第三方模块<br>安装：文件–设置–如图所示，点+号，搜索库<br><img src="https://img-blog.csdnimg.cn/20210401213227648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210401213346162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装，<br>即可看到<br><img src="https://img-blog.csdnimg.cn/20210401213410283.png" alt="在这里插入图片描述">安装成功<br>可能会遇到的问题：</p>
<ul>
<li>如，可能会发现没有pip，那么，如上下载pip就可以</li>
<li>如，可能会发现搜不到库，这是因为源的问题，可能是网络限制了，方法是在“Manage<br>Repositories”中，修改数据来源，默认的是“<a href="https://pypi.python.org/simple%E2%80%9D%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E5%B0%86%E5%85%B6%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%A6%82%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90%EF%BC%8C%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%9B%BD%E5%86%85%E7%9A%84pip%E9%95%9C%E5%83%8F%EF%BC%9A">https://pypi.python.org/simple”，我们可将其替换为如下的几个数据来源，这些都是国内的pip镜像：</a></li>
</ul>
<p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>阿里：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a><br>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a><br>中国科学技术大学：<a href="http://pypi.mirrors.ustc.edu.cn/">http://pypi.mirrors.ustc.edu.cn/</a><br><img src="https://img-blog.csdnimg.cn/20210401213629700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210401213643907.png" alt="在这里插入图片描述"><br>嗯…当然也许这样也不行，，我挂着校园网就下载不下来，得用实验室的网…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip -V     //在cmd中查看pip是否安装完成和版本</span><br></pre></td></tr></table></figure>
<p>如果出现了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pip&#x27;</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure>
<p>则是因为没有配置环境，找到python目录下的Scripts文件夹，复制路径<br>在环境变量中添加<br><img src="https://img-blog.csdnimg.cn/20210401213750744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再查即可</p>
<ul>
<li>如，搜到了库但是安装不上，出现了如图所示的报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Try to run this command <span class="keyword">from</span> the system terminal. </span><br><span class="line">Make sure that you use the correct version of <span class="string">&#x27;pip&#x27;</span> installed <span class="keyword">for</span> your Python interpreter located at</span><br><span class="line"> <span class="string">&#x27;C:\Users\86135\Desktop\Python\python.exe&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210401213845502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可能因为pip的版本不对<br>我们在cmd中输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip show pip</span><br></pre></td></tr></table></figure>
<p>即会出现<br><img src="https://img-blog.csdnimg.cn/20210401213942598.png" alt="在这里插入图片描述"><br>按照提示操作解决就可以<br><strong>from … import 语句</strong><br>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>
<p>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br><span class="line">fib(<span class="number">500</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure>
<p>这个声明不会把整个fibo模块导入到当前的命名空间中，它只会将fibo里的fib函数引入进来。<br>输出base64格式转换过后的字符串（使用pybase64库）（t为待输出的变量值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pybase64.b64encode(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="PY3的输入输出"><a href="#PY3的输入输出" class="headerlink" title="PY3的输入输出"></a>PY3的输入输出</h3><p>Python两种输出值的方式: 表达式语句和 print() 函数。<br>第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。<br>如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。<br>如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。</p>
<ul>
<li>str()： 函数返回一个用户易读的表达形式。</li>
<li>repr()： 产生一个解释器易读的表达形式。<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3>a)Python eval() 函数<br>eval() 函数用来执行一个字符串表达式，并返回表达式的值。<br>以下是 eval() 方法的语法:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(expression[, <span class="built_in">globals</span>[, <span class="built_in">locals</span>]])</span><br></pre></td></tr></table></figure>
<ul>
<li>expression – 表达式。</li>
<li>globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li>
<li>locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li>
</ul>
<p>返回表达式计算结果。<br>以下展示了使用 eval() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">7</span></span><br><span class="line"><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure>
<p>b)Python format 格式化函数<br>Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。<br>基本语法是通过 {} 和 : 来代替以前的 % 。<br>format 函数可以接受不限个参数，位置可以不按顺序。<br>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;world hello world&#x27;</span></span><br></pre></td></tr></table></figure>
<p>C)Python异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个数字：&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> num==<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&#x27;输入的数字是零&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> num&gt;<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&#x27;输入的数字是正数&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;输入的数字是负数&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">&#x27;输入无效，需要输入一个数字&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>d)Python ASCII码与字符相互转换<br>以下代码用于实现ASCII码与字符相互转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Filename : test.py</span></span><br><span class="line"><span class="comment"># author by : www.runoob.com</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用户输入字符</span></span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">&quot;请输入一个字符: &quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用户输入ASCII码，并将输入的数字转为整型</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个ASCII码: &quot;</span>))</span><br><span class="line"> </span><br><span class="line">print( c + <span class="string">&quot; 的ASCII 码为&quot;</span>, <span class="built_in">ord</span>(c))</span><br><span class="line">print( a , <span class="string">&quot; 对应的字符为&quot;</span>, <span class="built_in">chr</span>(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 test.py </span><br><span class="line">请输入一个字符: a</span><br><span class="line">请输入一个ASCII码: <span class="number">101</span></span><br><span class="line">a 的ASCII 码为 <span class="number">97</span></span><br><span class="line"><span class="number">101</span>  对应的字符为 e</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>调试HELLO,WORLD-小端序标记法</title>
    <url>/2021/04/04/%E8%B0%83%E8%AF%95HELLO,WORLD-%E5%B0%8F%E7%AB%AF%E5%BA%8F%E6%A0%87%E8%AE%B0%E6%B3%95/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>逆向分析代码，一般先静态分析收集代码相关信息，通过收集到的信息推测程序的结构与行为机，然后动态。动静结合。</p>
<h2 id="调试hello，world"><a href="#调试hello，world" class="headerlink" title="调试hello，world"></a>调试hello，world</h2><p>我们需要编写一个可执行文件：hello.exe<br>如图，当在编译器中写好程序后（VS2010）<br><img src="https://img-blog.csdnimg.cn/20210404091251497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">按照如图操作，relsease模式将.cpp文件生成.exe，然后点“生成”-&gt;”生成hello”即可，然后我们将这个程序拖进OD（注意不要将程序窗口关掉，最小化即可，否则会造成程序进程结束无法单步调试）<br><img src="https://img-blog.csdnimg.cn/20210404091350818.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210404091407876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>调试器停止的地方为程序执行的起始地址即EP（Entry Point入口点）</p>
<h2 id="小端序标记法"><a href="#小端序标记法" class="headerlink" title="小端序标记法"></a>小端序标记法</h2><p>字节序：多字节数据在计算机内存中存储或网络传输时各字节的存储顺序。</p>
<p>分类：<br>大端序：内存地址低位存储数据的高位，内存地址高位存储数据的低位。<br>小端序：内存地址低位存储数据的低位，内存地址高位存储数据的高位。<br><img src="https://img-blog.csdnimg.cn/20210404093045241.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210404091909662.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210404095202260.png" alt="在这里插入图片描述"><br>数据为单一字节时，字节存储顺序不受影响，多字节数据会导致存储顺序不同，字符串被保存在一个字符数组中，字符数组在内存中是连续的，此时向字符数组存放数据，无论大端序还是小端序，存储顺序都相同。</p>
<p>应用：<br>大端序：UNIX服务器的RISC系列CPU、网络协议<br>小端序：X86CPU（Windows逆向分析必须掌握）</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>栈-栈帧</title>
    <url>/2021/04/04/%E6%A0%88-%E6%A0%88%E5%B8%A7/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈：一种由高地址向低地址扩展的数据结构<br><img src="https://img-blog.csdnimg.cn/20210404101239647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>作用：<br>1.暂时保存函数内的局部变量<br>2.调用函数时传递参数<br>3.保存函数返回后的地址</p>
<p>先进后出原则<br>一个进程中，栈顶指针(ESP)初始状态指向栈底端，执行PUSH将数据压入栈，栈顶指针就会上移到栈顶端，若栈为空，则栈顶指针重新移动到栈底端。<br>EBP：存放栈底地址</p>
<p>向栈中压入数据时，栈顶指针减小，向低地址移动；弹出数据时，栈顶指针增加，向高地址移动。</p>
<h2 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h2><p>栈帧就是利用EBP（栈帧指针）寄存器访问栈内局部变量、参数、函数返回地址等的手段。</p>
<p>因为ESP的值一直在变化，使用ESP为基准很难指引CPU找到准确的地址，所以，先把用作基准点（函数起始地址）的ESP值保存到EBP，并维持在函数内部，这样可以很好的管理函数调用。</p>
<p>参数入栈的顺序和C语言源码中参数入栈的顺序是相反的，这叫做函数参数的逆向存储。</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>函数调用约定</title>
    <url>/2021/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>函数调用约定:是对函数调用时如何传递参数的一种约定。</p>
<p>调用函数前要先把参数压入栈然后再传递给函数，栈就是定义在进程中的一段内存空间，    其大小被记录在PE头中，进程运行时确定栈内存的大小（与malloc/new动态分配内存不同）</p>
<p><strong>函数执行完成后，栈中的参数不用处理</strong><br>因为只是临时存储在栈中的值，清除会浪费CPU资源，直接下一次向栈中存入其他值自然覆盖就行了，而且栈的内存是固定的，所以不能也不用释放内存。</p>
<p><strong>函数执行完毕之后，ESP值如何变化？</strong><br>ESP的值要恢复到函数调用之前，这样可引用的栈大小才不会被缩减。如何处理ESP，就要用到函数调用约定。</p>
<p>调用者：调用函数的一方<br>被调用者：被调用的函数<br>例如，main函数中调用printf()函数，调用者为main（），被调用者为printf()。</p>
<h2 id="主要函数调用约定"><a href="#主要函数调用约定" class="headerlink" title="主要函数调用约定"></a>主要函数调用约定</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>调用者直接清理其压入栈的函数参数。主要在C语言中使用。</p>
<p>优点：可以向被调用函数传递长度可变的参数。这种长度可变的参数在其它调用约定中很难实现。</p>
<h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p>常用于Win32 API,该方式由被调用者清理栈，C语言默认的函数调用方式为cdecl，若想要使用stdcall方式编译源码，只要使用_stdcall关键字就可以<br>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> _stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：通过被调用者清理栈，和cdecl相比代码尺寸要小。</p>
<h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>与stdcall方式基本类似，但该方式通常会使用寄存器（而非栈内存）去传递需要传递给函数的部分参数（前2个），若某函数有4个参数，则前两个参数分别使用ECX、EDX寄存器传递<br>优点：速度快，实现对函数的快速调用<br>缺点：可能会增加系统开销，还可能需要备份ECX和EDX中的数据。</p>
<h3 id="三种调用约定对比图"><a href="#三种调用约定对比图" class="headerlink" title="三种调用约定对比图"></a>三种调用约定对比图</h3><p><img src="https://img-blog.csdnimg.cn/20210404113147470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>虎符杯-逆向-redemption_code</title>
    <url>/2021/04/06/%E8%99%8E%E7%AC%A6%E6%9D%AF-%E9%80%86%E5%90%91-redemption_code/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape><br>早上洗了一早上衣服突然想起虎符杯的事情，匆匆开了电脑啥也没解出来，对着大佬的WP复现。<br>S1lenc3师傅带带我~~</p>
<p>无壳，32位<br>MIPS的，使用ida7.5打开<br>ctrl+f搜索main，跳转到主函数F5反编译查看<br><img src="https://img-blog.csdnimg.cn/20210406145321730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这有个判断函数，后面v10等于7有提到flag<br>看看函数<code>server_check_redemption_code()</code><br><img src="https://img-blog.csdnimg.cn/20210406145548354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后写着<code>return k - v10 + 1;</code><br>那说明v10(新）==k - v10（旧） + 1;<br>v10（新）==7已经知道，现在需要找的是v10（旧）和k<br>还是看函数<code>server_check_redemption_code()</code><br>跟着v10发现v10=v3,v3又是a2的长度，a2来自传参<br><img src="https://img-blog.csdnimg.cn/2021040615042647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>回到main函数看<br>a2对应的是v14，v14来自v11,v11又经过了<code>pre()</code>函数的处理<br>看看<code>pre();</code><br><img src="https://img-blog.csdnimg.cn/20210406151905296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有一个判断，输入的字符串长度为0xE（14），然后v10和a1有关，，所以知道v10（旧）=14，那么k就是20了，然后发现又调用了函数<code>server_check_redemption_code()</code>，并且还写到了v9，所以可以知道取了字符串<code>Ninja Must Die 3 Is A Cruel Game, So Hard For Me</code>的前14位<br>也就是<code>Ninja Must Die</code><br>我们发现从main函数调用的函数<code>server_check_redemption_code()</code>还有一个v13没有看<br><img src="https://img-blog.csdnimg.cn/20210406153127783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>顺着看过去发现了字符串<code>I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.</code><br>作为a1传过去，发现最后有一个检查v7和a1的第二十位是不是一样的<br><img src="https://img-blog.csdnimg.cn/20210406154048244.png" alt="在这里插入图片描述"><br>发现字符串<code>I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.</code>的第二十位和<code>Ninja Must Die</code>的第十四位都是e</p>
<p>所以 flag是：flag{Ninja Must Die}</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>PE文件格式（一）</title>
    <url>/2021/04/24/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PE文件是Windows操作系统下使用的可执行文件格式<br>PE文件指的是32位的可执行文件，也称作PE32；64位的可执行文件称作PE+或PE32+<em>（注意不是PE64）</em>，这是PE文件的一种扩展形式。</p>
<p><strong>PE文件种类</strong><br>可执行系列：EXE、SCR<br>驱动程序系列：SYS、VXD<br>库系列：DLL、OCX、CPL、DRV<br>对象文件系列：OBJ</p>
<p>除了OBJ之外的文件都是可执行的，有些虽然不能直接在Shell（Explorer.exe)中运行，但是可以使用调试器等来运行。不过，根据PE文件规范，OBJ也是做是PE文件 （虽然它确实是文件本身不能以任何形式执行）。</p>
<p>由于文件运行的所以信息，诸如如何加载到内存，何处开始运行以及运行中需要的DLL和多大的堆栈内存等都以结构体的形式存储在PE头中，故而，<strong>学习PE文件格式就是学习PE头中的结构体。</strong></p>
<p><strong>PE文件基本结构</strong><br>从DOS头到节区头（Section header）是PE头部分，其下的节区合称PE体。</p>
<p>文件中使用偏移（offset），内存中使用虚拟地址（VA）来表示位置。</p>
<p>文件的内容一般可以分为代码（.text）、数据（.data）、资源（.rsrc）节，分别保存。各个节区头定义了各节区在文件或内存中的大小、位置、属性等等。</p>
<p>PE头与各节区的尾部存在NULL填充，因为文件/内存中节区的起始位置应该在各文件/内存最小单位的倍数位置上，空白区域将用NULL填充。<br><img src="https://img-blog.csdnimg.cn/20210406165312595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>VA&amp;RVA</strong><br>VA指的是进程虚拟内存的绝对地址，RVA（相对虚拟地址）指的是从某个基准位置（ImageBase）开始的相对地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RVA+ImageBase&#x3D;VA</span><br></pre></td></tr></table></figure>
<p>PE头内部信息大多是以RVA形式存在，因为重定位的原因。</p>
<h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><h3 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h3><p>PE头的最前面添加了一个<code>IMAGE_DOS_HEADER</code>结构体，用来扩展已有的DOS EXE头<br><img src="https://img-blog.csdnimg.cn/20210407210655269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IMAGE_DOS_HEADER结构体的大小为40个字节，结构体中有两个重要成员<br><code>e_magic</code>:DOS签名（4D5A–&gt;ASCII值“MZ”）<br><code>e_lfanew</code>:指示NT头的偏移（根据不同文件拥有可变值）</p>
<p>我们把记事本拖进WinHEX看一看<br><img src="https://img-blog.csdnimg.cn/20210408170940179.png" alt="在这里插入图片描述"><br>64字节（共4行）的DOS头，第一个成员两个字节是可执行文件的标志信息；最后一个成员4字节是PE头的偏移地址为000000F8H，我们可以根据000000F8H来获取PE头的地址。<br>可见开头的e_magic：MZ，以及e_lfanew的值为000000F8（因为Intel系列的CPU以逆序存储数据，小端序）</p>
<p>这里说一下为什么MZ没有倒着读<br>再写PE文件查看器的时候，根据Windows的宏定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_DOS_SIGNATURE = <span class="number">0x5A4D</span></span><br></pre></td></tr></table></figure>
<p>所以查看的时候自己倒过来了成了4D 5A，故而我们直接读MZ作为标志就行了</p>
<h3 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h3><p>DOS存根在DOS头下方，是个可选项，即使没有，文件也能够运行，它的大小不固定<br><img src="https://img-blog.csdnimg.cn/20210408212456672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以利用DOSBOX运行这段-u查看汇编指令<br><img src="https://img-blog.csdnimg.cn/20210408212910478.png" alt="在这里插入图片描述"></p>
<h3 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h3><p>NT头IMAGE_NT_HEADERS<br><img src="https://img-blog.csdnimg.cn/20210408213526301.png" alt="在这里插入图片描述"><br>这个结构体由3个成员组成，第一个是签名，值为50450000H（“PE”00），另外两个分别是文件头和可选头<br><img src="https://img-blog.csdnimg.cn/20210408221120863.png" alt="在这里插入图片描述"><br>IMAGE_NT_HEADERS结构体大小为F8</p>
<h4 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h4><p>文件头是表现文件大致属性的IMAGE_FILE_HEADER结构体<br>它有4类重要成员，如果它们设置的不正确，将导致文件无法正常运行<br>包括PE头在内的24个字节</p>
<p><strong>Machine</strong><br>每个CPU都有唯一的Machine码，不同的表示可以运行在什么样的CPU上<br>兼容32位Intel  x86  的是14C x64:8664<br><a href="https://roov.org/2010/03/ia64-x86-64/">关于CPU型号的疑惑看这里</a><br><img src="https://img-blog.csdnimg.cn/20210408215212163.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210408215222384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>64位 winhex 打开如下图为 8664，即为 x64程序。<br><img src="https://img-blog.csdnimg.cn/20210422205731747.png" alt="在这里插入图片描述"><br><strong>NumberOfEsctions</strong><br>NumberOfEsctions指文件中存在的节区数量，也就是节表中的项数。该值一定要大于0，且当定义的节区数与实际不符时，将发生运行错误。</p>
<p>值为 0070，代表有 7 个节表<br><img src="https://img-blog.csdnimg.cn/20210422210107908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>SizeOfOptionalHeader</strong><br>SizeOfOptionalHeader用来指出<code>IMAGE_OPTIONAL_HEADER32</code>结构体的长度。PE装载器需要查看SizeOfOptionalHeader的值，从而识别<code>IMAGE_OPTIONAL_HEADER32</code>结构体的大小。<br>PE32+格式文件中使用的是<code>IMAGE_OPTIONAL_HEADER64</code>结构体，这两个结构体尺寸是不相同的，所以需要在SizeOfOptionalHeader中指明大小。<br>借助DOS头中的e_lfanew和文件头中的SizeOfOptionalHeader可以创建一种脱离常规的PE文件（PE Patch）</p>
<p>00f0 ,即为64位程序。<br><img src="https://img-blog.csdnimg.cn/20210422210501808.png" alt="在这里插入图片描述"><br>若为32位，则是00E0<br><strong>Characteristics</strong><br>该段用于标识文件的属性，文件是否是可运行的状态，是否为DLL文件等信息。<br><img src="https://img-blog.csdnimg.cn/20210408220816511.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210408220833142.png" alt="在这里插入图片描述"><br><strong>TimeDateStamp</strong><br>这个成员不影响文件的运行，是用来记录编译器创建文件的时间的。</p>
<h4 id="可选头"><a href="#可选头" class="headerlink" title="可选头"></a>可选头</h4><p>IMAGE_OPTIONAL_HEADER32是PE头结构体中最大的<br>需要关注下列成员，这些值是文件运行必需的，设置错误将导致程序无法正常运行。<br>文件头往后224个字节（.text之前）<br>最后一个成员是16个结构体数组，每个宽度8字节<br><img src="https://img-blog.csdnimg.cn/20210424160851386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>导入表的位置可以查看可选头的最后一个成员数组的第二个结构体（JIMAGE_OPTIONAL_HEADER32.DataDirectory[1]）（都是小端序的）</p>
<p>导出表的位置可以查看可选头的最后一个成员数组的第一个结构体（JIMAGE_OPTIONAL_HEADER32.DataDirectory[0]）（都是小端序的）<br><img src="https://img-blog.csdnimg.cn/20210425210305589.png" alt="在这里插入图片描述"></p>
<p>这里给一个示例，红色前面是导入表RVA，后面是导入表大小，蓝色表示导出表同理。此处是用WinHex打开的，只是做一个演示，由于WinHex显示的是文件偏移地址，所以上面的数值并不代表RVA</p>
<p>exe文件往往没有导出表</p>
<p>我们查看导入导出表以及后面所讲到的IAT可以使用PEiD等工具，非常方便<br><img src="https://img-blog.csdnimg.cn/2021042521085882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>顺便普及一个知识点：<br>文件偏移地址是指数据在PE文件中的地址，是文件在磁盘上存放时相对于文件开头的偏移。文件偏移地址从pe文件的第一个字节开始计数，起始值为0。用十六进制工具（如WINHEX）打开文件所显示的地址就是文件偏移地址。</p>
<p>IDA Pro虽然是静态反汇编工具，不过出来的是VA。</p>
<p>装载基址（Image Base）：PE文件装入内存的 基地址。默认情况下，EXE文件的基址为0x00400000，DLL文件的基址为0x10000000。</p>
<p>虚拟内存地址（VA）：PE文件中的指令被装入内存后的地址，OllyDbg动态反汇编产生。</p>
<p>相对虚拟地址（RVA）：内存地址相对与映射基址的偏移量。</p>
<p><strong>Magic</strong><br>为IMAGE_OPTIONAL_HEADER32时，magic码为10B，为IMAGE_OPTIONAL_HEADER64时，magic码为20B</p>
<p><strong>AddressOfEntryPoint</strong><br>AddressOfEntryPoint持有EP的RVA值。该值指出程序最先执行的代码起始地址。</p>
<p><strong>ImageBase</strong><br>一般来说，使用开发工具创建好EXE文件后，其ImageBase值为00400000，DLL文件的ImageBase值为10000000（也可以指定其他值）。<br>执行PE文件时，PE装载器先创建进程，再将文件载入内存，然后把EIP寄存器的值设置为ImageBase+AddressOfEntryPoint</p>
<p><strong>SectionAlignment，FileAlignment</strong><br>PE文件的Body部分被划分成若干节段，这些节段储存着不同类别的数据。<br>FileAlignment指定了节区在磁盘文件中的最小单位，而SectionAlignment则指定了节区在内存中的最小单位（SectionAlignment必须大于或者等于FileAlignment）<br>磁盘文件或者内存的节区带下必定是FileAlignment或SectionAlignment值的整数倍。</p>
<p><strong>SizeOfImage</strong><br>当PE文件加载到内存时，SizeOfImage指定了PE Image在虚拟内存中所占用的空间大小，一般文件大小与加载到内存中的大小是不同的（节段头中定义了各节装载的位置与占有内存的大小）</p>
<p><strong>SizeOfHeader</strong><br>SizeOfHeader用来指出整个PE头大小。该值必须是FileAlignment的整数倍。第一节段所在位置与SizeOfHeader距文件开始偏移的量相同。</p>
<p><strong>Subsystem</strong><br>用来区分系统驱动文件<code>（*.sys）</code>与普通的可执行文件<code>(*.exe,*.dll)</code><br><img src="https://img-blog.csdnimg.cn/20210420102314423.png" alt="在这里插入图片描述"><br><strong>NumberOfRvaAndSizes</strong><br>NumberOfRvaAndSizes用来指定DataDirectory( IMAGE_OPTIONAL_HEADER32结构体的最后一个成员）数组的个数。</p>
<p><strong>DataDirectory</strong><br>DataDirectory是由IMAGE_DATA_DIRECTORY结构体组成的数组，数组的每项都有被定义的值。将Directory想成某个结构体数组即可。重点关注EXPORT/IMPORT/RESOURCE、TLS Direction。特别需要注意的是IMPORT与EXPORT Directory，它们是PE头中非常重要的部分</p>
<h3 id="节区头"><a href="#节区头" class="headerlink" title="节区头"></a>节区头</h3><p>节区头中定义了各个节区的属性，PE文件中的code(代码)、data(数据)、resource(资源）等按照属性分类存储在不同节区。把PE文件创建成多个节区结构的好处是，这样可以保证程序的安全性。若把code与data放在一个节区中相互纠缠很容易引发安全问题。</p>
<p>节区头是由<code>IMAGE_SECTION_HEADER</code>结构体组成的数组，每个结构体对应一个节区。<br><img src="https://img-blog.csdnimg.cn/20210420104158828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>IMAGE_SECTION_HEADER结构体的重要成员项目</strong><br>virtualSize 内存中节区所占大小<br>VirtualAddress  内存中节区起始地址(RVA)<br>SizcOfRawData  磁盘文件中节区所占大小<br>PointerToRawData  磁盘文件中节区起始位置<br>Charateristics  节区属性(bit OR)</p>
<p><strong>Name字段：</strong><br>Name成员不像C语言中的字符串一样以NULL结束，并且没有“必须使用ASCII值”的限制。PE规范未明确规定节区的Name，所以可以向其中放入任何值，甚至可以填充NULL值。所以节区的Name仅供参考，不能保证其百分之百地被用作某种信息（数据节区的名称也可叫做.code )。</p>
<p><strong>映像( Image）：</strong><br>PE文件加载到内存时，文件不会原封不动地加载，而要根据节区头中定义的节区起始地址、节区大小等加载。因此，磁盘文件中的PE与内存中的PE具有不同形态。故而将装载到内存中的形态称为“映像”。<br><img src="https://img-blog.csdnimg.cn/20210422205442410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以在WINHEX里面看各个节区头数组，每个大小40字节<br><img src="https://img-blog.csdnimg.cn/20210422205239614.png" alt="在这里插入图片描述"></p>
<h2 id="RVA-to-RAW（FOA"><a href="#RVA-to-RAW（FOA" class="headerlink" title="RVA to RAW（FOA)"></a>RVA to RAW（FOA)</h2><p>RAW ADRRESS，或者FILE OSSFET ADRRESS，一般称文件偏移</p>
<p>完成从内存地址到文件偏移之间的映射称为RVA to RAW</p>
<p>RVA+ImageBase=VA</p>
<p>计算方法：<br>1.判断 RVA 是否位于 PE 头，如果是 FOA=RVA,</p>
<p>2.判断 RVA 位于哪个节<br>RVA &gt;= 节.VirtualAddress<br>RVA &lt;= 节.VirtualAddress + 当前内存对齐后的大小</p>
<p>3.FOA = RVA - 节.VirtualAddress +节.PointerToRawData </p>
<p>示例题目：<br><img src="https://img-blog.csdnimg.cn/20210420161828101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420161856257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="IAT（导入地址表）"><a href="#IAT（导入地址表）" class="headerlink" title="IAT（导入地址表）"></a>IAT（导入地址表）</h2><p>IAT是一种表格，用来记录程序正在使用哪些库中的函数<br>注意：导入地址表和导入表是两个东西，导出地址表和导出表也是。</p>
<h3 id="DLL（动态链接库）"><a href="#DLL（动态链接库）" class="headerlink" title="DLL（动态链接库）"></a>DLL（动态链接库）</h3><ul>
<li>不要把库包含到程序中，单独组成DLL文件，需要时调用即可。</li>
<li> 内存映射技术使加载后的DLL代码、资源在多个进程中实现共享。</li>
<li>更新库时只要替换相关DLL文件即可，简便易行。</li>
</ul>
<p><strong>加载DLL的方式:</strong><br>“显式链接”(Explicit Linking )，程序使用DLL时加载，使用完毕后释放内存;<br>“隐式链接”( Implicit Linking )，程序开始时即一同加载DLL，程序终止时再释放占用的内存。<br>IAT提供的机制即与隐式链接有关。</p>
<p><strong>DLL重定位：</strong><br>DLL文件的ImageBase值一般为10000000。比如某个程序使用a.dll与b.dll时，PE装载器先把a.dll装载到内存的10000000( ImageBase)处，然后尝试把b.dl也装载到该处。但是由于该地址处已经装载了a.dl，所以PE装载器查找其他空白的内存空间（ ex:3EO00000 )，然后将b.dll装载进去。这就构成了DLL重定位，它使我们不能对实际地址硬编码<br><em>注：实际操作中无法保证DLL一定会被加载到PE头内指定的ImageBase处。但是EXE文件（生成进程的主体）却能准确加载到自身的ImageBase 中，因为它拥有自己的虚拟空间。</em></p>
<h3 id="IMAGE-IMPORT-DESCRIPTOR"><a href="#IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR"></a>IMAGE_IMPORT_DESCRIPTOR</h3><p>该结构体记录着PE文件要导入的库文件，它在PE体中，但是查找它的位置的信息在PE头中。<br>执行一个普通程序往往需要导入许多库，导入多少库就存在多少个IMAGE_IMPORT_DESCRIPTOR结构体，这些结构体形成了数组，且最后以NULL结构体结束。<br>20字节，一个union相当于是一个<br><img src="https://img-blog.csdnimg.cn/20210420172736904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中比较重要的成员有：<br>OriginalFirstThunk   INT的地址(RVA)<br>Name   库名称字符串的地址（RVA)<br>FirstThunk   IAT的地址（RVA)</p>
<p>INT是一个包含导入函数信息（ Ordinal，Name)的结构体指针数组。</p>
<p>INT与IAT的大小应该相同，都是长整型（4个字节数据类型），以NULL结束</p>
<h2 id="EAT（导出地址表）"><a href="#EAT（导出地址表）" class="headerlink" title="EAT（导出地址表）"></a>EAT（导出地址表）</h2><p>EAT可以用来求取相应库中导出函数的起始地址的。它记录了导出符号的地址,名称,与序号 (提示:exe文件中很少有导出表的，大多数dll都有导出表，某些存放资源文件的dll就没有导出表)通过结构体IMAGE_EXPORT_DIRECTORY<br><img src="https://img-blog.csdnimg.cn/2021042416142992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>IMAGE_EXPORT_DIRECTORY中的重要成员（地址都是RVA）<br><img src="https://img-blog.csdnimg.cn/20210422201929436.png" alt="在这里插入图片描述"><br>附：从库中获得函数地址的API为GetProcAddress()函数，这个API函数引用EAT来获取指定API的地址。</p>
<p><strong>GetProcAddress()操作原理：</strong><br>(1)利用AddressOfNames成员转到“函数名称数组”。<br>(2)“函数名称数组”中存储着字符串地址。通过比较（ strcmp）字符串，查找指定的函数名称（此时数组的索引称为name_index )。<br>(3)利用AddressOfNameOrdinals成员，转到orinal数组。(4)在ordinal数组中通过name_index查找相应ordinal值。<br>(5)利用AddressOfFunctions成员转到“函数地址数组”(EAT )。<br>(6)在“函数地址数组”中将刚刚求得的ordinal用作数组索引，获得指定函数的起始地址。</p>
<p>一般导出函数均有相应名称，AddressOfNameOrdinals数组的值以index=ordinal的形式存在。但并不是所有的DLL文件都如此。导出函数中也有一些函数没有名称（仅通过ordinal导出)，AddressOfNameOrdinals数组的值为index!=ordinal。所以只有按照上面的顺序才能获得准确的函数地址。</p>
<p>对于没有函数名称的导出函数，可以通过Ordinal查找到它们的地址。从 Ordinal值中减去IMAGE_EXPORT_DIRECTORY.Base成员后得到一个值，使用该值作为“函敖地址数组”的索引。即可查找到相应函数的地址。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>PE规范只是一个标准，文件符合PE规范就是PE文件，有一额很有创意不符合常规的PE文件，我们称之为Patched PE，这也是PE文件，且在逆向当中很重要。总之，多学多练很重要，愿与诸君共勉！！</p>
<p>参考资料：<br>《逆向工程核心原理》<br><a href="https://www.bilibili.com/video/BV18r4y1K7sa?p=1">https://www.bilibili.com/video/BV18r4y1K7sa?p=1</a></p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
</search>
