<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDA pro使用笔记</title>
    <url>/2021/02/07/IDA%20pro%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>学习资料：IDA Pro    权威指南[美]Chris Eagle</p>
<h6 id="1-什么情况下需要使用反汇编？"><a href="#1-什么情况下需要使用反汇编？" class="headerlink" title="1.什么情况下需要使用反汇编？"></a>1.什么情况下需要使用反汇编？</h6><p>1)分析恶意软件<br>2)分析闭源软件的漏洞<br>3)分析闭源软件的互操作性<br>4)分析编译器生成的代码，以验证编译器的性能和准确性<br>5)在调试时显示程序指令</p>
<h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p>动态分析：是指在严格控制的环境中执行恶意软件，并使用系统检测实用工具记录其所有行为。<br>静态分析：试图通过代码来理解程序的行为。(查看对恶意软件进行反汇编之后得到的代码清单）。</p>
<h6 id="3-基本的反汇编算法："><a href="#3-基本的反汇编算法：" class="headerlink" title="3.基本的反汇编算法："></a>3.基本的反汇编算法：</h6><p>1)确定进行反汇编的代码区域；<br>2)知道指令的起始地址，读取该地址（或文件偏移量）所包含的值，并执行一次表查找，将二进制操作码的值余它的汇编语言助记符对应起来；<br>3)获取指令并解码任何所需的操作数后，需要对它的汇编语言等价形式格式话，并将其在反汇编代码中输出。<br>4)输出一条指令后，继续反汇编下一条指令，并重复上述过程，直到反汇编完文件中的所有指令。</p>
<h6 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h6><p>汇编语言源代码主要采用两种语法：AT&amp;T语法和Intel语法。<br>两种最主要的反汇编算法：线性扫描和递归下降。</p>
<h6 id="5-线性扫描反汇编的优缺点："><a href="#5-线性扫描反汇编的优缺点：" class="headerlink" title="5.线性扫描反汇编的优缺点："></a>5.线性扫描反汇编的优缺点：</h6><p>优点：能够完全覆盖程序的所有代码段。<br>缺点：没有考虑到代码中可能混有数据。<br>GNU调试器（gdb),微软公司的WinDug调试器和objdump实用工具均采用线性扫描算法。</p>
<h6 id="6-IDA-pro：递归下降反汇编。"><a href="#6-IDA-pro：递归下降反汇编。" class="headerlink" title="6.IDA pro：递归下降反汇编。"></a>6.IDA pro：递归下降反汇编。</h6><h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p>在使用IDA时，如果不知道是哪一种类型的文件，可以使用Go而不是New打开，以便跳过新文件导向。<br>用IDA加载文件，IDA会创建一个数据库，其组件分别保存在4个文件中，.id0,.id1,.nam,.til，分别对应是一个二叉树形式的数据库，描述每个程序字节的标记，与IDA的Named窗口中显示的给定程序位置有关的索引信息，用于存储与一个给定数据库的本地类型定义有关的信息。</p>
<h6 id="8-关闭IDA数据库："><a href="#8-关闭IDA数据库：" class="headerlink" title="8.关闭IDA数据库："></a>8.关闭IDA数据库：</h6><p>1）不打包数据库：不创建IDB文件，不建议；<br>2）打包数据库（存储）：将4个数据库组件文件存到一个IDB文件中，创建后，4个数据库组件文件即被删除；<br>3）打包数据库（压缩）：基本同上，唯一的差别在于数据库组件文件被压缩到IDB归档文件中。<br>4）收集垃圾：通常只在磁盘空间不足时使用；<br>5）不保存数据库：放弃当前对数据库所做的更改的唯一办法，类似撤销和还原功能。</p>
<h6 id="9-IDA崩溃怎么办？"><a href="#9-IDA崩溃怎么办？" class="headerlink" title="9.IDA崩溃怎么办？"></a>9.IDA崩溃怎么办？</h6><p>可以选择还原上次保存的版本，或依旧使用已打开的可能遭到破坏的版本，选择“继续使用未打包的库“并不能保证可以恢复所做的全部修改。</p>
<h6 id="10-IDA桌面简介："><a href="#10-IDA桌面简介：" class="headerlink" title="10.IDA桌面简介："></a>10.IDA桌面简介：</h6><p>1）彩色的水平带是IDA的概况导航栏（导航带），是被加载文件地址空间的线性视图。<br>2）对函数视图中的函数进行选中，即会跳转到反汇编视图中，可使用空格键在列表视图样式和图形试图样式（流程图）中切换。<br>3）使用View-&gt;Open Subviews命令恢复无意中关闭的数据显示窗口；<br>     使用Windows-&gt;Reset Desktop 命令可以迅速将桌面恢复到原始布局；<br>     使用Windows-&gt;Save Desktop 命保存你认为特别有用的当前桌面布局，使用Windows-&gt;Load Desktop命令迅速打开你之前保存的一个桌面布局；</p>
<h6 id="11-IDA不提供撤销功能！！！"><a href="#11-IDA不提供撤销功能！！！" class="headerlink" title="11.IDA不提供撤销功能！！！"></a>11.IDA不提供撤销功能！！！</h6><h6 id="12-ESC键用于关闭窗口。"><a href="#12-ESC键用于关闭窗口。" class="headerlink" title="12.ESC键用于关闭窗口。"></a>12.ESC键用于关闭窗口。</h6><h6 id="13-反汇编窗口："><a href="#13-反汇编窗口：" class="headerlink" title="13.反汇编窗口："></a>13.反汇编窗口：</h6><p>反汇编窗口又叫IDA-View窗口，是操作和分析二进制文件的主要工具。<br>1）IDA图形视图：<br>      将一个函数分解成许多基本块，显示该函数由一个块到另一个快的控制流程。<br>      每个基本块都有唯一的入口点和退出点。<br>      Yes绿色（执行分支），No红色（不执行分支）可用CTRL和加减号以及鼠标的滑轮来调整图形的大小，必要时使用概览。</p>
<h6 id="14-Names窗口（名称窗口）："><a href="#14-Names窗口（名称窗口）：" class="headerlink" title="14.Names窗口（名称窗口）："></a>14.Names窗口（名称窗口）：</h6><p>简要列举了一个二进制文件的所有全局名称，名称是指对一个程序虚拟地址的符号描述，可通过双击该窗口中的名称来立即跳转到显示该名称的反汇编视图。</p>
<h6 id="15-十六进制窗口："><a href="#15-十六进制窗口：" class="headerlink" title="15.十六进制窗口："></a>15.十六进制窗口：</h6><p>显示程序内容和列表的标准十六进制代码，每行显示16个字节，以及对应的ASCII字符。在反汇编窗口中，光标指向地址004013FA（一个调用指令），那么，在十六进制窗口中，构成这个指令的全部5个字节均突出显示。</p>
<h6 id="16-导入窗口："><a href="#16-导入窗口：" class="headerlink" title="16.导入窗口："></a>16.导入窗口：</h6><p>使用共享库时，IDA才需要用到导入窗口，静态链接的二进制文件不存在外部依赖关系，因此不需要导入其他内容。</p>
<h6 id="17-结构体窗口："><a href="#17-结构体窗口：" class="headerlink" title="17.结构体窗口："></a>17.结构体窗口：</h6><p>用于显示IDA决定在一个二进制文件中使用的任何复杂的数据结构的布局。可以为标准数据结构的布局提供现成的参考，帮助自己创建自己的可用作内存布局模块的数据结构。</p>
<h6 id="18-枚举窗口："><a href="#18-枚举窗口：" class="headerlink" title="18.枚举窗口："></a>18.枚举窗口：</h6><p>列出标准枚举数据类型，可以使用枚举来代替整数常量，提高反汇编代码的可读性。</p>
<h6 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h6><p>IDA中的段和二进制中的段不是一个意思。</p>
<h6 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h6><p>按下快捷键G可以打开“跳转到地址“的窗口。</p>
<h6 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h6><p>IDA注释以分号为前缀，表示这一行分号以后的部分属于前缀。</p>
<h6 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h6><p>IDA的脚本语言叫IDC。</p>
<p>注：<br>对于mips架构下的逆向工程，ida不能进行反汇编<br>如果仍想使用ida解决，可以下载插件Retdec，对v.0.7版本的ida可能不识别。</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFd平台搭建（文件方式）</title>
    <url>/2021/02/07/CTFd%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%EF%BC%88%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>记录一下自己搭建过程中踩的坑<br>没有云服务器，在虚拟机中搭建的，使用的是Ubuntu16.04.7LTS<br>查看当前版本的命令：<code>cat /etc/issue</code><br>然后发现自己的虚拟机连不上网了，重新弄一下吧，选的是NAT模式。<br><img src="https://img-blog.csdnimg.cn/20200912164424975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意给它管理员权限才能更改。</p>
<p>连上网后就可以开始了<br>1.升级源</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>在升级源的时候可能会报错<br><img src="https://img-blog.csdnimg.cn/2020091216540780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我自己忘记截图了，用一下网上博客的图片吧<br>遇到这种情况是因为连接不到 US 的服务器，所以更新失败，需要在系统设置中将源服务器设置为中国的。<br><img src="https://img-blog.csdnimg.cn/20200912165825384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样应该就可以了，如果还不巧遇到了报的错误为”Failed to fetch 404 Not Found”，这个问题参考了一下<a href="https://www.cnblogs.com/wangshaowei/p/10994764.html">https://www.cnblogs.com/wangshaowei/p/10994764.html</a>的博客，说是是因为每个Ubuntu版本都有生命结束周期（EOL）时间，常规的Ubuntu发行版提供18个月的支持，而LTS（长期支持）版本则长达3年（服务器版本）和5年（桌面版本）。当某个Ubuntu版本达到生命结束周期时，其仓库就不能再访问了，你也不能再从Canonical获取任何维护更新和安全补丁。如果你所使用的Ubuntu系统已经被结束生命周期，你就会从apt-get或aptitude得到以下404错误，因为它的仓库已经被遗弃了。</p>
<p>解决方法为将/etc/apt/sources.list路径下的源替换为旧版本仓库的源。</p>
<p>2.安装git，因为CTFd的源码和部署好的题目都是要通过github传输的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>
<p>3.安装pip　　</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure>
<p>安装pip的时候也会遇到一些问题，如果出现异常可以升级pip</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>4.安装Flask，因为CTFd是基于Flask框架建造的，所以要搭建CTFd要安装Flask</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo pip install Flask</span><br></pre></td></tr></table></figure>
<p>5.下载CTFd</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo git clone https:<span class="comment">//github.com/isislab/CTFd.git</span></span><br></pre></td></tr></table></figure>
<p>6.安装CTFd</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cd CTFd</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo ./prepare.sh</span><br></pre></td></tr></table></figure>
<p>第二条命令执行完了之后可能会遇到警告和报错，下面逐步介绍一下如何解决<br><img src="https://img-blog.csdnimg.cn/20200912171919176.png#pic_center" alt="在这里插入图片描述"><br>这是由于Python版本的问题了，Ubuntu自带2.7和3.5版本的Python，而2的版本在2020年1月就停止维护了，未来的pip版本将放弃对Python 2.7的支持。我们需要将2的版本改成3的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 <span class="number">100</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 <span class="number">150</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用这两个命令将2 改成3<br>改完了之后可以检查一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<p>这个命令可以看到当前Pyhton的版本，但是可能不准确，因为通过改变指向可以让它显示，但是并不能将环境也改变成3 ，而环境变量是和默认有关联的<br>可通过查看环境来确定，如下命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">env python</span><br></pre></td></tr></table></figure>
<p>如果此时显示的是3 的版本那就是成功改变了<br>接下来我们需要给3 安装它的pip，否则它会出现<br>/usr/bin/python3: No module named pip<br>也会出现这样的报错<br><img src="https://img-blog.csdnimg.cn/20200912173314758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载安装pip的方法很简单，在虚拟机中的官网下载按照说明安装就行了。注意要使用sudo命令不然没有权限会安装失败。</p>
<p>可能还会出现这样的警告<br><img src="https://img-blog.csdnimg.cn/20200912174111985.png#pic_center" alt="在这里插入图片描述"><br>这个执行以下命令应该就可以解决了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo chown -R root /home/$USERNAME/.cache/pip/</span><br><span class="line">sudo chown -R root /home/$USERNAME/.cache/pip/http/</span><br></pre></td></tr></table></figure>
<p>然后我们再执行安装CTFd的命令，发现它又出现了新的报错<br><img src="https://img-blog.csdnimg.cn/20200912174603106.png#pic_center" alt="在这里插入图片描述"><br>查看了pydantic的官方文档之后发现也是由于Pyhton版本的问题，他它需要3.6及以上的版本才能够支持，Python自带的版本最高只有3.5，这就需要升级<br>可以参考这篇博客，方法非常有效，而且有提供安装Python3.6之后怎样预防崩溃<br><a href="https://segmentfault.com/a/1190000021838605">https://segmentfault.com/a/1190000021838605</a><br>附上截图防止失效<br><img src="https://img-blog.csdnimg.cn/20200912175157339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果不小心真的把Ubuntu弄崩溃了导致终端框打不开，还可以参考这一篇博客<br><a href="https://blog.csdn.net/DeepWolf/article/details/88800603">https://blog.csdn.net/DeepWolf/article/details/88800603</a></p>
<p>这篇博客也介绍了Python3.6的安装方法以及如何改变环境，一定要记得改环境，不然依然就无法成功。<br><a href="https://blog.csdn.net/qq_32216809/article/details/86347926">https://blog.csdn.net/qq_32216809/article/details/86347926</a></p>
<p>这样再执行安装CTFd的命令应该就没有问题了</p>
<p>7.运行CTFd（要在打开CTFd文件的命令后执行（cd CTF））</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo python serve.py</span><br></pre></td></tr></table></figure>
<p>虚拟机的浏览器中访问127.0.0.1：4000/就可以看待自己的CTFd平台了<br><img src="https://img-blog.csdnimg.cn/20200912180012276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>不足的是它访问的速度非常慢…目前还不清楚应该如何解决，这篇博客也许能够提供帮助。<br><a href="https://blog.csdn.net/weixin_43880435/article/details/107339592?utm_source=app">https://blog.csdn.net/weixin_43880435/article/details/107339592?utm_source=app</a></p>
<p>如果想要让它在物理机中访问需要安装gunicorn并规定映射的端口<br>我尝试了但是没有成功，大家可以试一试。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo pip install gunicorn</span><br><span class="line">sudo gunicorn --bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span> -w <span class="number">1</span> <span class="string">&quot;CTFd:create_app()&quot;</span></span><br><span class="line">sudo pip install gunicorn</span><br></pre></td></tr></table></figure>
<p>关于速度慢可以尝试这个<br><a href="https://blog.csdn.net/asd413850393/article/details/98123982">https://blog.csdn.net/asd413850393/article/details/98123982</a></p>
<p>嗯，以上就是这次搭建的全过程，遇到了很多问题，下次尝试用docker搭建一下~</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MIPS汇编入门基础知识笔记</title>
    <url>/2021/02/07/MIPS%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>学习资料：[计算机组成与设计：硬件、软件接口(第4版)]</p>
<h6 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h6><p>每行最多只有一条指令，注释总在一行之尾结束。<br>add a,b,c      #表示把b,c相加放入a中，#后是表示注释。</p>
<h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p>每条MIPS算术指令只执行一个操作，并且有且仅有三个变量。</p>
<h6 id="3．"><a href="#3．" class="headerlink" title="3．"></a>3．</h6><p>MIPS中，只能对存放在寄存器中的数执行算术操作。</p>
<h6 id="4．"><a href="#4．" class="headerlink" title="4．"></a>4．</h6><p>减法 sub</p>
<h6 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h6><p>MIPS体系中寄存器大小为32位，故在MIPS体系中将其称为”字“。<br>字和寄存器的大小相同。</p>
<h6 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h6><p>一般的，用$s0~$s31表示变量所对应的寄存器，用$t0之类的表示所需的临时寄存器。</p>
<h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p>数据传送指令：在存储器和寄存器之间传送数据的指令，因为MIPS的算术运算只对寄存器进行操作；为了访问存储器中的一个字，指令必须给出存储器地址。存储器就是一个很大的下标从0开始的一堆数组，地址就相当于数组的下标。</p>
<h6 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h6><p>取数指令：lw 示例  A[8]，指令为 lw   $t0,32($s3)   $3是数组A的起始地址，又叫基址。数据传送指令中的常量（本例中的32）称作偏移量，存放基址的寄存器（本例中的$s3)称为基址寄存器。</p>
<h6 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h6><p>常数和寄存器中的值相加即得存储器地址。</p>
<h6 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h6><p>在MIPS中，字的起始地址必须是4的倍数，这叫对齐限制,MIPS实际上是按字节编址的，一个字有4个字节，字的地址是4的倍数。</p>
<h6 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h6><p>存数指令：  sw  示例：变量h存放在寄存器$s2中，数组A的基址放在$s3中，编译A[12]=h+A[8];<br>                 lw  $t0,32($s3)<br>                 add   $t0,$s2,$t0<br>                 sw       $t0,48($s3)   </p>
<h6 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h6><p>使用常数：<br>法1：lw  $t0,AddrConstant4($s1)<br>         add  $s3,$s3,$t0<br>(假设$s1+AddrConstant4 是常量4 的存储器地址）<br>法2：用立即数       addi    $s3,$s3,4            # $s3=$s3+4    （而且支持副常数，不需要设置减立即数的指令)</p>
<h6 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h6><p>数据传送指令可以被视作一个操作数为0的加法，MIPS将寄存器$zero恒置为0。<br>最低有效位：在MIPS字中最右边的一位。<br>最高有效位：在MIPS字中最左边的一位。<br>C和JAVA中用符号0xnnnn表示十六进制数。</p>
<h6 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h6><p>类似if和go to语句功能的指令：<br>beq register1,register2,L1   表示如果register1,register2中的数值相等，则转移到标签L1的语句执行，beq代表”如果相等则分支“。<br>bne register1,register2,L1 表示如果两者值不相等，转到标签L1的语句执行，bne代表“如果不相等则分支“<br>这两条传统上称为条件分支。<br>条件最后要有Exit退出。</p>
<h6 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h6><p>无条件分支指令：jump,简写为j,在if语句的结尾部分，需要引入另一种指令。</p>
<h6 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h6><p>循环:<br>Loop:<br>……<br>……<br>j   Loop        (跳转到循环开始Loop标签处）<br>Exit:</p>
<h6 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h6><p>$ra:用于返回起始点的返回地址寄存器<br>$a0<del>$a3:用于传递参数的四个参数寄存器<br>$v0</del>$v1:用于返回值的两个值寄存器</p>
<h6 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h6><p>栈指针：$sp（第29号寄存器）  栈指针指示栈中最近分配的地址的值，它指示寄存器被换出的位置，或寄存器旧值的存放位置。<br>栈指针以字为单位进行调整</p>
<h6 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h6><p>逻辑左移：sll   例：sll      $t1,$s3,2    左移两位（4）<br>逻辑右移：srl</p>
<h6 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h6><p>压栈：将数据放入栈中<br>出栈：从栈中移除数据</p>
<h6 id="附：MIPS常用指令一览表"><a href="#附：MIPS常用指令一览表" class="headerlink" title="附：MIPS常用指令一览表"></a>附：MIPS常用指令一览表</h6><p><img src="https://img-blog.csdnimg.cn/20200323152756435.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152812179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152831498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200323152843303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>给Ubuntu安装vmtools</title>
    <url>/2021/02/07/%E7%BB%99Ubuntu%E5%AE%89%E8%A3%85vmtools/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>之前安装ubuntu的时候没有安装vmtools，本周补安装<br> 打开ubuntu发现安装VMtools的小条变成了灰色点不了（应该是因为用的汉化版VNware）<br><img src="https://img-blog.csdnimg.cn/2020100111135071.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>解决办法：<br>1.关闭虚拟机；<br>2.在虚拟机设置分别设置CD/DVD、CD/DVD2、软盘为自动检测；<br>3.再重启虚拟机，灰色字即点亮。<br><img src="https://img-blog.csdnimg.cn/2020100111145969.png#pic_center" alt="在这里插入图片描述"><br>可能会造成打开的时候有问题，没关系，重复开几次一直OK就可以了<br>然后再打开就发现可以<br>点击虚拟机菜单栏中的【虚拟机】–&gt;【安装VMware Tools】<br>然后就出现了<br><img src="https://img-blog.csdnimg.cn/20201001111556538.png#pic_center" alt="在这里插入图片描述"><br>接下来把VMwareTools…tar.gz文件提取（不要点成复制了）到某个新建的目录下，比如myfile目录下：<br><img src="https://img-blog.csdnimg.cn/20201001111714526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>大概是这样，找的网图。<br>启动终端，然后切换到root用户（切换命令为：sudo su，回车然后会提示你输入当前登录用户的密码，输入成功后即可进入root用户）。<br>以root用户进入到刚刚提取到的vmware-tools-distrib文件夹下，然后输入命令：./vmware-install.pl，然后回车。<br>可能会出现报错：Unable to excute “/usr/bin/vmware-uninstall-tools.pl<br>主要原因是：usr/bin目录下没有vmware-uninstall-tools.pl<br>解决方案：<br>进入vmtools的文件解压目录，然后进入bin目录下将vmware-uninstall-tools.pl复制到usr/bin目录下<br>需要输入的命令分别有：<br>cd /opt<br>cd vmware-tools-distrib/<br>cd bin<br>cp vmware-uninstall-tools.pl /usr/bin<br>这样就没问题了，可以继续执行这部分的操作，附上网图，自己的终端被关了…<br><img src="https://img-blog.csdnimg.cn/20201001111811453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上面的操作后就开始安装VMware Tools了，根据其提示输入yes/no，直到出现Enjoy, –the VMware team如下图，就表示安装成功了，然后手动重启虚拟机<br><img src="https://img-blog.csdnimg.cn/20201001111836262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在这一步中也可能会出现问题，那是因为之前可能安装过vwtools但是没有成功，一般不用管重复这一步的命令然后按照它[]中提示的操作就可以了，非常傻瓜式的操作但是我喜欢。<br>重启虚拟机之后可以看到变成了<br><img src="https://img-blog.csdnimg.cn/20201001111859849.png#pic_center" alt="在这里插入图片描述"></p>
<p>到此<br>完成！！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo+github搭建个人博客</title>
    <url>/2021/02/07/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><em>之前实验室布置的任务，记录一下踩坑的过程,也参考了许多师傅的博客，在此感谢</em></p>
<h3 id="一-GitHub篇"><a href="#一-GitHub篇" class="headerlink" title="一.GitHub篇"></a>一.GitHub篇</h3><h5 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h5><p>首先需要有一个Github账号，直接官网注册就OK啦。<br>注册完成后需要新建一个仓库，仓库的命名就是<code>用户名.github.io</code>例如，我的用户名是<code>nor-ming</code>，我的仓库就叫<code>nor-ming.github.io</code>，这样方便让大家访问<br><img src="https://img-blog.csdnimg.cn/20210207165759645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：</p>
<ul>
<li>注册的邮箱需要验证，不要乱写</li>
<li>仓库创建成功可能不会立即生效，需要等一会<br>创建成功之后你可以在这里看到你的仓库<br><img src="https://img-blog.csdnimg.cn/20210207164739998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时访问<code>用户名.github.io</code>能够看见你之前建仓库时候README里面的内容，像这样<br><img src="https://img-blog.csdnimg.cn/2021020716494616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h5><a href="https://blog.csdn.net/sanxd/article/details/82624127">安装参考这个吧</a><br>安装完成后要配置环境变量：<br>网上说在Path变量中增加： C:\Program Files (x86)\Git\bin   （你git实际安装的bin路径）<br>我好像是这样的（真的不记得了啊啊啊啊啊<br><img src="https://img-blog.csdnimg.cn/20210207170756315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207171002258.png" alt="在这里插入图片描述"><br>验证是否配置成功，打开windows命令行，输入git命令，出现下列信息表示配置成功。<br><img src="https://img-blog.csdnimg.cn/20210207171100659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="为仓库配置SSH-Key"><a href="#为仓库配置SSH-Key" class="headerlink" title="为仓库配置SSH-Key"></a>为仓库配置SSH-Key</h5>GitHub上连接已有仓库是通过SSH公开密钥认证方式进行的，所以我们需要配置密钥。<br>打开Git BASH，运行命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>
<p>“邮件地址”写成在创建GitHub账户时候用的邮箱地址。然后连续回车三次（它会要求你设置密码，可以不设置直接回车就好了）<br>最终，它会生成一个文件，如图<br><img src="https://img-blog.csdnimg.cn/20210207172200456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记事本打开id_rsa.pub，复制里面的内容，在你的GitHub主页的设置中找到如下选项<br><img src="https://img-blog.csdnimg.cn/20210207171546343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击New SSH key<br>名称随便起，Title粘贴复制内容，添加成功后，邮箱会收到提示邮件<br>在Git Bash中测试，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210207172608821.png" alt="在这里插入图片描述"><br>如图所示即为设置成功<br>有的博客说还要配置Git信息，个人不太记得了，不放心可以试试，也是在Git Bash中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email  <span class="string">&quot;用户名@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="二-Node-js篇"><a href="#二-Node-js篇" class="headerlink" title="二.Node.js篇"></a>二.Node.js篇</h3><p>首先在自己的电脑上安装 Node.js，<a href="https://nodejs.org/zh-cn/download/">下载地址</a><br>安装完毕之后，配置环境变量<br><img src="https://img-blog.csdnimg.cn/2021020717323827.png" alt="在这里插入图片描述"><br>应该是这两个吧，在Path里面添加<br>测试<br><img src="https://img-blog.csdnimg.cn/20210207173411819.png" alt="在这里插入图片描述"><br>有的时候可能使用Git Bash会很慢，此时可以选择切换镜像（但是个人感觉还好，一般不建议换掉）<br>切换命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>查看版本命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure>
<p>切回官方镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://www.npmjs.org</span><br></pre></td></tr></table></figure>
<h3 id="三-Hexo篇"><a href="#三-Hexo篇" class="headerlink" title="三.Hexo篇"></a>三.Hexo篇</h3><p>Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完毕之后，配置环境变量<br>在path变量中添加类似如下的地址，注意最后是.bin文件</p>
<blockquote>
<p>C:\ProgramFiles\nodejs\node_global\node_modules\hexo\node_modules.bin</p>
</blockquote>
<p>测试<br><img src="https://img-blog.csdnimg.cn/20210207174338143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个文件夹，这个文件夹会是你以后管理博客用的，{}中填名字，运行之后找到该文件夹，会发现文件夹中出现了这样一些文件<br><img src="https://img-blog.csdnimg.cn/20210207205754630.png" alt="在这里插入图片描述"><br>在这里打开Git Bash，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>将 Hexo 编译生成 HTML 代码，<br>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p>
<p>此时，可以利用Hexo 提供的 serve 命令把博客在本地运行起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure>
<p>将项目成功运行在本地的4000端口上，浏览器访问<code>http://localhost:4000：</code> 即可看到空的博客页面</p>
<h3 id="四-部署完善篇"><a href="#四-部署完善篇" class="headerlink" title="四.部署完善篇"></a>四.部署完善篇</h3><p>只能在本地访问自然时不合适的，下面我们将要做的是将博客部署到 GitHub Pages 并完善它</p>
<p>记事本打开根目录下的 _config.yml 文件<br><img src="https://img-blog.csdnimg.cn/20210207210555144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 main 分支，最终修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Nor-ming/Nor-ming.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>还需要额外安装一个支持 Git 的部署插件，名字叫做<code>hexo-deployer-git</code>，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>这是由于版本不同造成的，可以使用如下命令安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，执行部署命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>访问自己的博客网址，就可以看到和本地一样的内容了</p>
<p>我们还可以修改自己的站点信息<br>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Nor-ming</span><br><span class="line">subtitle: <span class="string">&#x27;&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;&#x27;</span></span><br><span class="line">keywords:</span><br><span class="line">author: Alien Wan（924704640@qq.com)</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>它们在我的网页中的显示是这样的<br><img src="https://img-blog.csdnimg.cn/2021020721222311.png" alt="在这里插入图片描述"><br>原来的主题太普通，我们可以换一个主题，下载Next主题并选择自己喜欢的<br>首先命令行进入到项目的根目录（对我来说救赎被我命名为Norming的文件夹），执行如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。<br>修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>hexo g<br>hexo d<br>即可查看</p>
<p>接下来我们就对主题进行进一步地详细配置<br>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。<br>Next 主题还提供了多种样式，通过修改配置文件的 scheme 字段即可，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line">scheme: Mist</span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>hexo g<br>hexo d 后即可查看</p>
<p>我们还可以自己制作站点的小标签<br>有一个网站可以直接将图片转化为站点小图标，站点链接为：<code>https://realfavicongenerator.net</code>，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。<br>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure>
<p>更新后可以发现站点图标改变了，例如我的<br><img src="https://img-blog.csdnimg.cn/20210207213037348.png" alt="在这里插入图片描述"><br>添加tags（标签）页面可以方便查找文章<br>在根目录执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>成功后会提示一个路径，根据路径，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-02-05 20:42:36</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加type: “tags”到内容中，添加后是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-02-05 20:42:36</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加分类页，也是为了帮助查找文章，方法类似上面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-02-05 20:52:50</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加后为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-02-05 20:52:50</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加文章<br><img src="https://img-blog.csdnimg.cn/20210207213210825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207213229361.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210207213243740.png" alt="在这里插入图片描述"><br>然后返回根目录，在Public文件夹下打开Git Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure>
<p>文章即上传成功（可能会慢，等一会多刷新几次就好了）</p>
<p>Hexo的首页默认会显示文章的详细信息，如果想让它只显示标题，如下所示<br><img src="https://img-blog.csdnimg.cn/20210207213809951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以在md文件前面这样写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: IDA pro使用笔记</span><br><span class="line">categories: 逆向学习笔记</span><br><span class="line">tags:</span><br><span class="line">- 逆向</span><br><span class="line">- 工具使用</span><br><span class="line">---</span><br><span class="line">&lt;escape&gt;&lt;!-- more --&gt;&lt;/escape&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意<escape><!-- more --></escape> 下一行也要空格</p>
<p>其中categories: 逆向学习笔记是分类<br>tags:</p>
<ul>
<li>逆向</li>
<li>工具使用<br>是标签<br>Public文件夹更新后可以看到这样<br><img src="https://img-blog.csdnimg.cn/20210207214653835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210207214713716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文章多了查找不方便还可以加上一个搜索功能，需要先安装一个插件，叫做 <code>hexo-generator-searchdb</code>，命令如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在项目的 _config.yml 里面添加搜索设置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>然后在主题的 _config.yml 里面修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>更新后如图<br><img src="https://img-blog.csdnimg.cn/20210207214936237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>也可以加一个404页面<br>直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2021-02-05 21:22 </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">页面丢失啦~嘤嘤嘤(｡•́︿•̀｡)</span><br><span class="line">试试看&lt;a href=<span class="string">&quot;https://nor-ming.github.io/&gt;&quot;</span>&gt;点击此处&lt;/a&gt;返回首页(｡･ω･｡)ﾉ♡</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span><br><span class="line">    nor-ming</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>

<p>好啦，此时你就拥有了自己的博客啦，开始记录自己的学习过程吧~~</p>
<p>附上一些参考资料：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/jie-fang/p/13445913.html</span><br><span class="line">https://sspai.com/post/62441</span><br><span class="line">https://www.cnblogs.com/xrblog/p/11585902.html</span><br><span class="line">https://zhuanlan.zhihu.com/p/50787870</span><br><span class="line">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</span><br></pre></td></tr></table></figure>
<p>可能还有一些别的就不一一列举啦</p>
<p>最后<br>附上自己的博客<a href="https://nor-ming.github.io/">https://nor-ming.github.io/</a></p>
<p>完结<br>撒花花(✿≖ ◡ ≖)✧</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>easyre-reverse1-reverse2-内涵的软件-新年快乐-[BJDCTF 2nd]guessgame-helloword-xor</title>
    <url>/2021/02/08/easyre-reverse1-reverse2-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90-%5BBJDCTF%202nd%5Dguessgame-helloword-xor/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>@<a href="BUUCTF">TOC</a></p>
<h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>64位<br>ida打开  shift+F12看字符串 </p>
<p>flag{this_Is_a_EaSyRe}  </p>
<h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p>64位<br>ida打开 看字符串<br><img src="https://img-blog.csdnimg.cn/2021020817025880.png" alt="在这里插入图片描述"><br>双击过去<br><img src="https://img-blog.csdnimg.cn/20210208170426893.png" alt="在这里插入图片描述"><br>ctrl+x查看交叉引用<br><img src="https://img-blog.csdnimg.cn/20210208170448996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>F5查看伪代码(ASCII码转换按R键）<br><img src="https://img-blog.csdnimg.cn/20210208170509541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208170522887.png" alt="在这里插入图片描述"><br>可知，将{hello_world}中的o换成0即可</p>
<p>flag{hell0_w0rld}</p>
<h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p><img src="https://img-blog.csdnimg.cn/20210208170631319.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208170647776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag{hack1ng_fo1_fun}</p>
<h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p>32位<br><img src="https://img-blog.csdnimg.cn/20210208170731407.png" alt="在这里插入图片描述"><br>flag{49d3c93df25caad81232130f3d2ebfad}</p>
<p><em>注：建议先运行一下看看有什么，针对运行出的文字找，汉字可以看Hex View窗口的</em></p>
<h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p><img src="https://img-blog.csdnimg.cn/20210208170812143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>UPX壳，可手动，可用脱壳机<br>32位<br>脱完壳拖进ida<br><img src="https://img-blog.csdnimg.cn/20210208174817278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> flag{HappyNewYear!}</p>
<h2 id="BJDCTF-2nd-guessgame"><a href="#BJDCTF-2nd-guessgame" class="headerlink" title="[BJDCTF 2nd]guessgame"></a>[BJDCTF 2nd]guessgame</h2><p><img src="https://img-blog.csdnimg.cn/2021020817085670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>flag{S1mple_ReV3r5e_W1th_0D_0r_IDA}</p>
<h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><p><img src="https://img-blog.csdnimg.cn/2021020817092288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安卓逆向，模拟器打开，出现此界面<br>使用Android Killer<br><img src="https://img-blog.csdnimg.cn/20210208170953639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag{7631a988259a00816deda84afb29430a}</p>
<h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><img src="https://img-blog.csdnimg.cn/20210208171030530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>异或，再异或回去就好了<br>看一下global<br><img src="https://img-blog.csdnimg.cn/20210208171051916.png" alt="在这里插入图片描述"><br>shift+E可以导出数据<br><img src="https://img-blog.csdnimg.cn/20210208171118232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = [<span class="string">&#x27;f&#x27;</span>, <span class="number">0x0A</span>, <span class="string">&#x27;k&#x27;</span>, <span class="number">0x0C</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">0x0D</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;p&#x27;</span>, <span class="number">0x19</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">0x1F</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">0x0E</span>, <span class="string">&#x27;g&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">0x0F</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;O&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i], <span class="built_in">str</span>)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i - <span class="number">1</span>], <span class="built_in">str</span>)):</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ str1[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x += <span class="built_in">chr</span>(str1[i] ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>flag{QianQiuWanDai_YiTongJiangHu}</p>
]]></content>
      <categories>
        <category>BUUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk安装与配置</title>
    <url>/2021/02/08/jdk%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>搜索jdk下载jdk1.8<br>安装，注意路径<br>设置JAVA_HOME:<br><img src="https://img-blog.csdnimg.cn/20210208183934507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置path变量：<br><img src="https://img-blog.csdnimg.cn/20210208184100235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意此处已经自动生成了<em>C:\Program Files (x86)\Common Files\Oracle\Java\javapath。</em><br>不需要再配置classpath，如果配置了，可能会在编译java程序时造成”错误: 找不到或无法加载主类“<br>具体参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_44527588/article/details/102596461">https://blog.csdn.net/weixin_44527588/article/details/102596461</a></p>
</blockquote>
<p>配置完成后，在cmd输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version  </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020819175586.png" alt="在这里插入图片描述"><br>如图所示<br>即可</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse3-不一样的flag-SimpleRev-Java逆向解密</title>
    <url>/2021/02/18/reverse3-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag-SimpleRev-Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p>@<a href="BUUCTF">TOC</a></p>
<h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p><img src="https://img-blog.csdnimg.cn/20210208210231939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可知Str2为下图所示<br><img src="https://img-blog.csdnimg.cn/20210208204808284.png" alt="在这里插入图片描述"><br>故而查看函数<code>sub_4110BE</code> 对Str进行处理看看做了什么处理<br><img src="https://img-blog.csdnimg.cn/20210208211009174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到后面Dst会经过aAbcdefghijklmn[]数组的变换，我们看看<code>aAbcdefghijklmn[64]</code>里有什么<br><img src="https://img-blog.csdnimg.cn/20210208211124794.png" alt="在这里插入图片描述"><br>base64</p>
<p>编写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str2=<span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">x=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str2)):</span><br><span class="line">    x+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i])-i)</span><br><span class="line">x=base64.b64decode(x)</span><br><span class="line">x = x.decode(<span class="string">&#x27;ASCII&#x27;</span>)  <span class="comment">#将字符处理成ASCII码形式</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>flag{i_l0ve_you}</p>
<h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p><img src="https://img-blog.csdnimg.cn/20210208213523589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开头有一个内存拷贝，点进去看下：<br><img src="https://img-blog.csdnimg.cn/20210208213616417.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210208213635194.png" alt="在这里插入图片描述"><br>提示信息是让上下左右移动，迷宫题，可知是遇到1则退出，最终需要走到#，是一个横向是5的迷宫</p>
<p>*1111</p>
<p>01000</p>
<p>01010</p>
<p>00010</p>
<p>1111#</p>
<p>*为起点，#为终点，所路径为222441144222</p>
<p>flag{222441144222}</p>
<h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p><img src="https://img-blog.csdnimg.cn/20210208214331716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看<code> Decry();</code>函数<br><img src="https://img-blog.csdnimg.cn/20210209220639645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以求出改变前的str2就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;adsfkndcls&#x27;</span></span><br><span class="line">d = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">str2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">    <span class="keyword">for</span> v1 <span class="keyword">in</span> d:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(text[i]) == (<span class="built_in">ord</span>(v1) - <span class="number">39</span> - <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(text)]) + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>:</span><br><span class="line">            str2 += v1</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure>
<p>flag{KLDQCUDFZO}</p>
<h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><p>jd-gui打开<br><img src="https://img-blog.csdnimg.cn/2021020922214594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>java代码，很直白</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">     flag+=<span class="built_in">chr</span>(key[i]-<span class="number">64</span>^<span class="number">0x20</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
<p>flag{This_is_the_flag_!}</p>
]]></content>
      <categories>
        <category>BUUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>C++跨平台开发（VS2019+WSL(Ubuntu))</title>
    <url>/2021/03/01/C++%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88VS2019+WSL(Ubuntu))/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><em>由于实验室任务要求，特学习了一下如何跨平台开发项目，时间有点长了，如有疏漏，还请包涵指正！</em></p>
<p>我们在开发项目的过程中，有时候会进行跨平台开发，例如，我们需要开发Linux项目，但是受到条件限制，目前只有Windows环境，如何在Windows环境下进行Linux项目开发就成了迫切的需要。</p>
<p>本篇介绍利用在Windows下使用VS2019编写CMake并连接WSL的方式进行Linux项目的开发。</p>
<h5 id="预备介绍"><a href="#预备介绍" class="headerlink" title="预备介绍"></a>预备介绍</h5><p>WSL（windows下的Linux子系统）：Windows Subsystem for Linux（简称WSL）是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。<br>使用WSL不需要进行ssh连接，更加方便。</p>
<p>Cmake:CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。它能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性,类似UNIX下的automake。只是 CMake 的组态档取名为 CMakeLists.txt。</p>
<h5 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h5><p>在控制面板里面找到程序与功能，打开启用或关闭Windows功能<br><img src="https://img-blog.csdnimg.cn/20210301201810626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到适用于Linux的Windows子系统，并勾选。<br><img src="https://img-blog.csdnimg.cn/20210301201933452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开始安装，之后会要求重启一次。<br>打开Windows应用商城（ Microsoft Store），搜索WSL，下载Ubuntu（过程可能会有点满，耐心等待）<br><img src="https://img-blog.csdnimg.cn/20210301202358604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装完成之后，打开，设置用户名和密码，一开始的源可能比较慢，可以换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu/mirrors.aliyun/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu/mirrors.aliyun/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get upgrade    //更新已安装的包到最新，这个是可选的</span><br></pre></td></tr></table></figure>
<p>附上其它一些apt命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>
<p>要配置WSL安装使其与Visual Studio一起使用，需要安装以下工具：编译器（GCC或Clang），gdb，rsync和zip。如果使用的是CMake，则还需要安装基础的构建系统（Ninja或Unix Makefile）。可以通过以下命令将它们安装在使用apt的发行版中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install g++ gdb make ninja-build rsync zip</span><br></pre></td></tr></table></figure>
<p>另外，如果想要使用SSH连接，请参考这篇文章：<br><a href="https://www.jianshu.com/p/cc8c8abcbf2e">使用SSH连接Windows10中的Linux子系统</a></p>
<h5 id="安装开发Linux的VS2019"><a href="#安装开发Linux的VS2019" class="headerlink" title="安装开发Linux的VS2019"></a>安装开发Linux的VS2019</h5><p>VS2019的安装可以直接在官网下载，注意30天试用期，可以激活来获取更长的使用期限。</p>
<p>下面主要介绍一下如何配置：<br>开发Linux，安装程序打开后，选择Modify，然后单击Workloads选项卡。向下滚动到“其他工具集”，然后选择带有C ++工作负载的Linux开发。<br><img src="https://img-blog.csdnimg.cn/20210301205916145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认情况下，对Linux的CMake支持是选中的。</p>
<p>开启一个Cmake项目，进入管理配置：<br><img src="https://img-blog.csdnimg.cn/20210301210651184.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210301210712628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择WSL-GCC-Debug，这个需要看你的WSL上安装的是G++还是Clang,参考WSL的准备<br><img src="https://img-blog.csdnimg.cn/20210301210804198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择刚刚安装的Ubuntu<br><img src="https://img-blog.csdnimg.cn/20210301210840576.png" alt="在这里插入图片描述">选中WSL-GCC-Debug的配置<br>选中新配置后一般会出现上面两个红框的内容：第一个是由于远程生成需要对方Linux系统安装支持的Cmake版本；第二个是由于每个配置都有各自的CMake缓存，所以需要生成一次。<br><img src="https://img-blog.csdnimg.cn/20210301210931983.png" alt="在这里插入图片描述"><br>先点击“是”安装CMake，安装好以后点击“生成+”生成CMake Cache。首先选择“是”，点击以后会自动安装WSL的CMake。如下：<br><img src="https://img-blog.csdnimg.cn/20210301211044745.png" alt="在这里插入图片描述"><br>可能还会有许多其它问题，这里强烈安利这篇文章，写的非常好：<br><a href="https://blog.csdn.net/luoyu510183/article/details/105847329">VS2019 C++的跨平台开发——Cmake项目（二）</a></p>
<p>都配置好之后就可以进行开发了</p>
<p>至于Cmake文件的编写，这里就不过多赘述了，可以参考以下几篇文章：<br><a href="https://blog.csdn.net/luoyu510183/article/details/105151127">VS2019 C++的跨平台开发——Cmake项目（一）</a><br><a href="https://blog.csdn.net/yiminghd2861/article/details/85413408">CMake：CMakeLists.txt文件的编写语法</a><br><a href="https://www.cnblogs.com/rookiezjz/p/12347656.html">CMake 用法总结（转载）
</a></p>
<p>可以拿这个项目练练手:<br><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">编写一个Linux调试器</a></p>
<p>参考资料：<br><a href="https://blog.csdn.net/foxriver_gjg1989/article/details/102854440">利用vs2019编译器远程调试linux程序（走心版）</a><br><a href="https://devblogs.microsoft.com/cppblog/c-with-visual-studio-2019-and-windows-subsystem-for-linux-wsl/">C ++与Visual Studio 2019和Windows子系统的Linux（WSL）</a><br><a href="https://docs.microsoft.com/zh-cn/cpp/linux/connect-to-your-remote-linux-computer?view=msvc-160#connect-to-wsl">在 Visual Studio 中连接到你的目标 Linux 系统</a><br><a href="https://docs.microsoft.com/en-us/cpp/linux/cmake-linux-project?view=msvc-160">在Visual Studio中创建CMake Linux项目</a><br><a href="https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019">Visual Studio中的CMake项目</a><br><a href="https://docs.microsoft.com/en-us/cpp/linux/download-install-and-setup-the-linux-development-workload?view=msvc-160&viewFallbackFrom=vs-2019">下载，安装和设置Linux工作负载</a><br><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a><br><a href="https://www.jianshu.com/p/80289094d225">WSL-Ubuntu 更换apt源为阿里源</a><br><a href="https://blog.csdn.net/luoyu510183/article/details/105151127">VS2019 C++的跨平台开发——Cmake项目（一）</a><br><a href="https://blog.csdn.net/luoyu510183/article/details/105847329">VS2019 C++的跨平台开发——Cmake项目（二）</a><br><a href="https://www.jianshu.com/p/cc8c8abcbf2e">使用SSH连接Windows10中的Linux子系统</a><br><a href="https://devblogs.microsoft.com/cppblog/using-visual-studio-for-cross-platform-c-development-targeting-windows-and-linux/">使用Visual Studio进行针对Windows和Linux的跨平台C ++开发</a><br><a href="https://devblogs.microsoft.com/cppblog/intellisense-for-remote-linux-headers/">用于远程Linux标头的IntelliSense</a><br><a href="https://blog.csdn.net/yiminghd2861/article/details/85413408">CMake：CMakeLists.txt文件的编写语法</a><br><a href="https://www.cnblogs.com/rookiezjz/p/12347656.html">CMake 用法总结（转载）</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>安恒笔记-逆向工程（01基础介绍）</title>
    <url>/2021/03/02/%E5%AE%89%E6%81%92%E7%AC%94%E8%AE%B0-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%EF%BC%8801%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><strong><em>本文为安恒课程学习记录，绝大部分资料来自于安恒。</em></strong></p>
<h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><p>基础：<br>C,C++，汇编，windows编程<img src="https://img-blog.csdnimg.cn/20210302085722263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进阶：<br>工具使用，简单实战<br><img src="https://img-blog.csdnimg.cn/20210302085917366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实战：<br>软件破解，逆向分析<br><img src="https://img-blog.csdnimg.cn/20210302090019677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="OllyDbg窗口介绍"><a href="#OllyDbg窗口介绍" class="headerlink" title="OllyDbg窗口介绍"></a>OllyDbg窗口介绍</h3><p>寄存器窗口：<br><img src="https://img-blog.csdnimg.cn/20210302090847417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>日志窗口：<br>L图标或View-&gt;Log，显示日志窗口，通过配置，可以显示OllyDbg启动时保存在日志窗口的不同类型信息，也涉及条件断点的信息。这个窗口最重要的选项就是可以保存到文件。如果我们想把信息保存为文本文件，点击右键选择Logtofile。</p>
<p>模块窗口：<br>E按钮View-&gt;Executables显示程序运行使用的模块：exe,，dll,，ocx和其它。</p>
<p>内存窗口：<br>M按钮或View-&gt;Memory显示我们的程序映射到内存的信息，一个内存块可能被分为几个部分。右键点击可以搜索不同种类的字符串，可以在访问上设置中断。</p>
<p>线程窗口：<br>T按钮或View-&gt;Threads显示程序的线程窗口。</p>
<p>句柄窗口：<br>H按钮或View-&gt;Handles，句柄窗口。</p>
<p>修改、调用栈窗、断点窗口：<br>P按钮或View-&gt;Patches，如果程序经过了修改，这里显示修改的信息，没有被修改过程序就为空白。<br>K按钮或View-&gt;Callstack显示调用堆栈的窗口信息，可以尝试反向跟踪函数的调用顺序。<br>B按钮或View-&gt;Breakpoints显示程序普通断点的列表窗口，这里不显示硬件断点和内存断点。</p>
<p>参考窗口、跟踪窗口：<br>R按钮或View-&gt;Reference参考窗口，显示我们在OllyDbg中搜索的结果。<br>“…”按钮或View-&gt;Runtrace显示RUNTRACE（RUN跟踪)命令的结果。这里我们也可以通过Logtofile保存输出结果到文件。</p>
<h3 id="OllyDbg操作快捷键"><a href="#OllyDbg操作快捷键" class="headerlink" title="OllyDbg操作快捷键"></a>OllyDbg操作快捷键</h3><p>单步步入(F7)：<br>执行一行代码，遇到CALL 等子程序时会进入其中，进入后首先会停留在子程序的第一条指令上。<br>单步步过(F8)：<br>执行一行代码，遇到CALL 等子程序不进入其代码。<br>运行(F9)：<br>运行调试程序，直到遇到断点停止运行。当程序运行时，在OllyDbg 的右下角会显示单词Running。<br>暂停(F12)：临时暂停程序。<br>终止(DEBUG-&gt; CLOSE)：终止程序。</p>
<h3 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h3><p><strong>函数的调用约定</strong><br>是对函数调用的一个约束和规定(规范)，描述了函数参数是怎么传递和由谁清除堆栈的。<br>它决定以下内容：(1)函数参数的压栈顺序，(2)由调用者还是被调用者把参数弹出栈，(3)以及产生函数修饰名的方法</p>
<p>__cdecl：<br>cdecl调用约定又称为C调用约定，是c/c++语言缺省的调用约定。参数按照从右至左的方式入栈，函数本身不清理栈，此工作有调用者负责，返回值在eax中。由于由调用者清理栈，所以允许可变参数函数存在。</p>
<p>__stdcall：<br>stdcall很多时候被称为pascal调用约定。pascal语言是早期很常见的一种教学用计算机程序设计语言，其语法严谨，参数按照从右至左的方式入栈，函数自身清理堆栈，返回值在eax中。</p>
<p>__fastcall:<br>fastcall的调用方式运行相对快，因为它通过寄存器来传递参数。它使用ecx和edx传送两个双字或更小的参数，剩下的参数按照从右至左的方式入栈，函数自身清理堆栈，返回值在eax中。</p>
<p><img src="https://img-blog.csdnimg.cn/20210302100825374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>__thiscall:<br>__thiscall是C++类成员函数缺省的调用约定，但它没有显示的声明形式。因为在C++类中，成员函数调用还有一个this指针参数，因此必须特殊处理<br>参数入栈：参数从右向左入栈<br>this指针入栈：如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入栈。<br>栈恢复：对参数个数不定的，调用者清理栈，否则函数自己清理栈。</p>
<p>参考资料：<br><a href="https://blog.csdn.net/luoweifu/article/details/52425733">带你玩转Visual Studio——调用约定__cdecl、__stdcall和__fastcall</a></p>
<h3 id="OD设置断点"><a href="#OD设置断点" class="headerlink" title="OD设置断点"></a>OD设置断点</h3><p>普通断点：<br>在命令窗口使用[BP addr]命令<br>在想要下断点的指令地址处按F2<br>双击汇编窗口想要下断点的指令行的十六进制区域</p>
<p>查看断点：<br>断点下好之后，对应的地址处回变红。<br>可以在断点窗口看到所有断点。</p>
<p>编辑断点：<br>在断点窗口中进行。选中断点，右击。<br>Remove(删除):从列表中删除断点。<br>Disable(禁止):禁用断点但并不将断点从列表中删除。禁用时,断点并不会触发。<br>Edit condition(编辑条件):给断点设置触发条件。<br>Follow in disassembler(反汇编窗口中跟随):在反汇编窗口中显示断点。<br>Disable all or enable all(全部禁止):禁用/启用列表中的全部断点。<br>Copy to Clipboard(复制到剪贴板):把选中断点的信息复制到剪贴板。</p>
<h3 id="断点设置原理（普通断点）"><a href="#断点设置原理（普通断点）" class="headerlink" title="断点设置原理（普通断点）"></a>断点设置原理（普通断点）</h3><p>当我们设置断点后,OD会将对应指令处第一个字节指令替换成CC（例如，EAX的值本应为0xC7C30174，但实际上却变成了0xC7C301CC）。但是为了不影响界面显示效果,OD会将CC显示为原字节。但是,我们可以在内存单元中读取出其真实的内容,并且可以在反调试中用此方法来检测断点。<br><img src="https://img-blog.csdnimg.cn/20210302110647816.png" alt="在这里插入图片描述"></p>
<h3 id="OD设置API断点"><a href="#OD设置API断点" class="headerlink" title="OD设置API断点"></a>OD设置API断点</h3><p>API断点可以通过在命令窗口输入<br>BP API函数名 来进行设置<br>例如:<code>BP MessageBoxA</code><br>此处必须指定API函数的确切名称,而且<strong>大小写敏感</strong>。<br>BPX命令可以给引用或者调用了指定API函数的指令都下断点。例如:<code>BPX MessageBoxA</code></p>
<h3 id="特殊断点"><a href="#特殊断点" class="headerlink" title="特殊断点"></a>特殊断点</h3><p><strong>1.内存访问断点：</strong><br>这种类型的断点修改内存页的访问属性。当前我们设置了内存断点。任何代码访问(读,写或者执行代码)了该处代码的话,都会触发异常。</p>
<p>内存访问断点有两个缺点:<br>(1)它们不会出现[B]断点列表中和其他的地址。所以,你必须记得设置在什么地址处。<br>(2)不能同时设置多个内存断点。如果你设置了一个那么你之前设置的就会被自动删除。</p>
<p>删除内存断点：<br>可以数据窗口中单击鼠标右键选择-Breakpoint-Remove memory breakpoint。还可以设置一个新的内存断点,旧的内存断点会自动被删除。</p>
<p>“Memory,on access”是内存访问断点(读或者写),“Memory,on write”是内存写断点。OD也可以对区段设置内存断点,我们打开内存窗口，选择区段设置断点。</p>
<p>在同一个API函数中,如果通过bp命令设置断点会被程序检测而导致断点失效的话,也许设置内存访问断点可以绕过这个检测。设置内存访问断点这个方法也可以通过检测内存页的属性并恢复内存页的属性来进行保护,但是这在反调试技巧中并不常见。</p>
<p><strong>2.硬件断点：</strong><br>硬件断点(简称:HBP)是处理器的特性之一,设置硬件断点可以使程序中断下来。在OD中我们最多可以设置4个硬件断点。</p>
<p>硬件断点分为:硬件执行断点(ON EXECUTION),硬件写入断点(ON WRITE),硬件访问断点(ON ACCESS)3种。硬件执行断点与普通的CC断点作用一样,但硬件执行断点并不会将指令首字节修改为CC,所以更难检测。<br>可以通过命令：<br>HE 地址<br>例如：<code>HE 401013</code>来设置硬件执行断点</p>
<p>OD中有个特殊的窗口,通过它我们可以查看和管理硬件断点。我们选择菜单栏中的Debug-Hardware breakpoints就可以打开这个窗口。</p>
<p>在硬件断点窗口中,如果我们单击Follow按钮,反汇编窗口中该硬件断点所对应的那一行指令就会灰色高亮显示。如果我们单击Delete按钮,那么相应的硬件断点就会被清除。</p>
<p>如果我们重启OD,可以看到硬件断点依然存在。</p>
<p>硬件访问/写入断点是断在触发硬件断点的下一条指令处，跟内存断点不一样,内存断点会断在触发断点指令处。</p>
<p><strong>3.条件断点：</strong><br>条件断点实际上就是普通的CC断点,只不过该断点的触发需要满足设置的条件,如果满足设置的条件,那么程序就会中断下来,如果不满足条件的话,就和没有设置CC断点差不多。</p>
<p>单击鼠标右键选择-Breakpoint-Conditional，即可设置条件断点。<br>例如，如果你想当前EAX等于400000的时候,程序中断下来,那么条件应该写成:“EAX == 400000”。<br><img src="https://img-blog.csdnimg.cn/2021030218480285.png" alt="在这里插入图片描述"><br>设置了条件断点的语句地址显示的是粉红色。<br>我们在主菜单项中选择-Help-Contents。<br><img src="https://img-blog.csdnimg.cn/20210302185237347.png" alt="在这里插入图片描述"><br>选择超链接Breakpoints,紧接着选择超链接expression。<br><img src="https://img-blog.csdnimg.cn/20210302185313373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即可访问OD文档中对条件表达式的规定以及示例。</p>
<p><strong>4.条件记录断点：</strong><br>条件记录断点跟条件断点差不多,区别在于,我们可以通过设置该断点来记录下设置的条件的精确值。例如，我们给一个API函数设置条件记录断点,程序中有很多地方调用了这个API函数,通过该条件记录断点我们可以精确的记录程序中每处调用该API函数传递给它的内容。</p>
<p>在反汇编窗口中单击鼠标右键选择-Goto-Expression转到MessageBoxA函数的入口处。单击鼠标右键选择-Breakpoint-Conditional log即可设置条件记录断点。</p>
<p>既然我们不想程序中断下来,那么Condition(条件)编辑框这一栏我们就不填,Pause program(中断程序)这个单选按钮选着Never(不中断)即可。Expression(表达式)这个编辑框我们填写[ESP],我们知道在API函数的入口处,栈顶存放的是函数的返回地址。接着,Log value of expression(记录表达式的值)这个单选按钮我们选择Always(总是),即总是记录表达式的值,也就是[ESP]的值。Log function arguments(记录函数参数)这个单选按钮我们也选择Always(总是),即记录函数的参数个数/参数内容。<br><img src="https://img-blog.csdnimg.cn/20210302191552933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>F9键运行程序。看日志窗口什么也没有记录,因为MessageBoxA并没有被调用。我们打开注册窗口,输入指定的用户名和序列号。<br>可以查看日志窗口，会记录函数调用的信息，只有满足了设置的条件才会断下来，否则是记录。</p>
]]></content>
      <categories>
        <category>逆向学习笔记</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>java-基础</title>
    <url>/2021/03/08/java-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><escape><a id="more"></a></escape> </p>
<p><a href="https://www.bilibili.com/video/BV12J41137hu">学习资料</a></p>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello,world!"></a>hello,world!</h2><p><img src="https://img-blog.csdnimg.cn/20210302210024489.png" alt="在这里插入图片描述"><br>下载这个软件，打开，按照下图方式新建<br><img src="https://img-blog.csdnimg.cn/20210302205934981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>比如，我们创建一个hello类<br><img src="https://img-blog.csdnimg.cn/20210302210127661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>psvm可以自动生成main方法<br><img src="https://img-blog.csdnimg.cn/20210302210455185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sout可以快捷生成system.out<br><img src="https://img-blog.csdnimg.cn/20210302210832682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>hello,world!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行<br><img src="https://img-blog.csdnimg.cn/20210302210913129.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210302211059209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是新建一个公开类，名叫hello</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br></pre></td></tr></table></figure>
<p>这是一个main方法，（）里面传了一个参数</p>
<h2 id="规范新建一个大型项目"><a href="#规范新建一个大型项目" class="headerlink" title="规范新建一个大型项目"></a>规范新建一个大型项目</h2><p>新建一个空项目：<br><img src="https://img-blog.csdnimg.cn/20210302212820669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>起一个名字，选一个地址<br><img src="https://img-blog.csdnimg.cn/2021030221290755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>新建一个模块<br><img src="https://img-blog.csdnimg.cn/20210302213028411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210302213238198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入名字之后就可以看到src了<br><img src="https://img-blog.csdnimg.cn/20210302213325132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>工具栏点击<br><img src="https://img-blog.csdnimg.cn/20210302213604123.png" alt="在这里插入图片描述"><br>选择相应的版本<br><img src="https://img-blog.csdnimg.cn/20210302213656760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>OK之后就可以像之前介绍的那样新建一个类开始了</p>
<h2 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* javadoc:文档注释</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> Helloworld</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>1.所有标识符都应该以<code>大小写字母，$或者_</code>为首字母开始，后面的可以<code>大小写字母，$或者_和数字</code>。<br>2.标识符大小写敏感。<br>3.不可以使用关键字作为变量名或者方法名。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java的所有变量必须先定义后使用。<br><strong>基本类型：</strong><br><img src="https://img-blog.csdnimg.cn/20210304164937146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210304165539926.png" alt="在这里插入图片描述"><br>最好完全避免使用浮点数比较，因为浮点数是离散的，存在舍入误差<br><img src="https://img-blog.csdnimg.cn/20210304170506322.png" alt="在这里插入图片描述"></p>
<p>类型转换：<br><img src="https://img-blog.csdnimg.cn/20210304170719581.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210304170933319.png" alt="在这里插入图片描述"><br>注意：不能对布尔值进行转换，且转换的时候可能存在内存溢出或者精度问题。<br><img src="https://img-blog.csdnimg.cn/20210304172456830.png" alt="在这里插入图片描述"><br>已经溢出了之后转换是没有用的了<br><strong>引用类型：</strong><br>String是引用类型。</p>
<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p><img src="https://img-blog.csdnimg.cn/20210304173526780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>局部变量（仅在方法内有效）必须声明和初始化值<br>实例变量:从属于对象，如果不自行初始化，这个类型的默认值为0 0.0，布尔值默认是false，除了基本类型其余的都是null。<br><img src="https://img-blog.csdnimg.cn/20210304174841984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>final是修饰符，写的时候不存在先后顺序<br><img src="https://img-blog.csdnimg.cn/20210304175329782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pro1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b=a++;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="keyword">int</span> c=++a;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://img-blog.csdnimg.cn/2021030710170369.png" alt="在这里插入图片描述"><br>总结就是：<br>a++是先执行完了a再加，<br>++a是先加上再执行<br>幂运算：<br><img src="https://img-blog.csdnimg.cn/20210307102534668.png" alt="在这里插入图片描述"><br>左移乘，右移除法</p>
<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p><img src="https://img-blog.csdnimg.cn/20210308144743520.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308145035144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308145057382.png" alt="在这里插入图片描述"><br>包头<br>例如packet com.baidu.operator必须放在最顶端<br>后面可以有导入的其它包，导入包的时候比如可以是<br>import java.util.Date;<br><img src="https://img-blog.csdnimg.cn/20210308145439520.png" alt="在这里插入图片描述"><br>使用*<br><img src="https://img-blog.csdnimg.cn/20210308145543439.png" alt="在这里插入图片描述"></p>
<h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><p> 此命令用来生成尽可能多显示中文的javadoc文档<br><img src="https://img-blog.csdnimg.cn/20210308150359920.png" alt="在这里插入图片描述"><br>使用IDLE生产javadoc文档<br>打开需要生成javadoc文档的代码，选择tools<br><img src="https://img-blog.csdnimg.cn/20210308151202514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择文件，选择存放的文件夹，添加要求命令：<br><img src="https://img-blog.csdnimg.cn/20210308151702345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成<br><img src="https://img-blog.csdnimg.cn/20210308151724625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsaWVuRW93eW5XYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
</search>
